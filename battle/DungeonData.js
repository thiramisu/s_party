// @ts-check
"use strict";

import { 冒険場所の情報 } from "./BattleData.js";

/**
 * @typedef {import("./BattleMember.js").戦闘メンバー} 戦闘メンバー
 */

export class ダンジョン情報 extends 冒険場所の情報 {
  /**
   * @param {string} 名前
   * @param {ダンジョン階層情報} 階層リスト
   * @param {?Map<string, ダンジョンイベント種類>} [イベントリスト]
   */
  constructor(名前, 階層リスト, イベントリスト) {
    super();
  }

  マップを取得(現在x, 現在y, 視認可能距離) {

  }

  static 初期化() {
    new ダンジョン情報("クルクの洞窟", new ダンジョン階層情報(undefined, 20, ["プニプニ平原", "キノコの森"], [`
◇◇◇◇宝
◆◆ボ◆◆
◇◇◇◇◇
隠◆◆◆◇
◇◇始◇◇
`, `
◇◇◇◇宝
◆◆ボ◆◆
◇◇◇◇◇
◇◆◆◆隠
◇◇始◇◇
`, `
◇隠◇◇宝
◇◆ボ◆◆
◇隠◇◇◇
◇◆◆◆◇
◇◇始◇◇
`, `
◇◆◇◇宝
◇◆ボ◆◆
◇隠◇◇◇
◇◆◆◆◇
◇◇始◇◇
`, `
宝◇◇◇◇
◆◆ボ◆◆
◇◇◇◇◇
◆◆◆◆◇
◇◇始◇◇
`, `
宝◇◇◇◇
◆◆ボ◆◆
◇◇◇◇◇
◇◆◆◆◆
◇◇始◇◇
`]));
    new ダンジョン情報("レヌール城", new ダンジョン階層情報(undefined, 50, ["幽霊城"], [`
宝ボ◇扉◇◆◇◆鍵
◆◆◆◆◇◇◇◆◇
◇◇◇◆◇◆◇◆◇
◇◆◇◇◇◆◇◇◇
◇◆隠◆◆◆◆◆◇
◇◆◇◇◇◇◇◆◇
◇◇◇◆始◆◇◇◇
◆隠◆◆◆◆◆◆隠
◆◇◇◇宝◇◇◇◇
`, `
宝ボ◇扉◇◇◇◇◇
◆◆◆◆◆◇◆◆◇
◆◇◇◇◆◇◆◆◇
◇◇◆◇◇◇◇◇◇
◇◆◆◆◇◆隠◆◇
◇◇鍵◆◇◆宝隠◇
◇◆◆◆◇◆◆◆◇
◇◆◇◇◇◇◇◆◇
◇◇◇◆始◆◇◇◇
`, `
◆鍵◆◇◇◇◇◆１
◆◇◆◇◆◆◇◆隠
◇◇◇◇◆◇◇◇◇
◇◆◆◆◆◇◆◆◇
◇◇◇始◇◇◇◆◇
◇◆◆◇◆◆◆◆扉
◇◆◆◇◇◇◆◆◇
◆◆◇◇◆◇◇◆ボ
１隠◇◆◆◆鍵◆宝
`, `
１◆◇◇◇◇◇隠１
隠◆◇◆扉◆◇◆◆
◇◇◇◆ボ◆◇◇◇
◇◆◆◆宝◆◆◆◇
◇◇◇◆◆◆◇◇◇
◇◆◇◇始◇◇◆◆
◇◆◇◆◇◆◆◆鍵
◇◆◇◆◇◇◇◆◇
鍵◆◇◇◇◆◇◇◇
`, `
１◆◇◇始◇◇◇◇
隠◇◇◆◇◆◆◆◇
◇◇◆◆◇◇◇◆◇
◇◆◆◇◇◆◇◆◇
◇◇◇◇◆◆◇◇◇
鍵◆◆◇◇◇◇◆◇
◆◆扉◇◆◆◇◆◇
宝ボ◇◆◆◇◇◆隠
◆◆◆◆鍵◇◆◆１
`, `
◇◇◇◇鍵◇◇◇◇
◇◆◆◆◆◆◆◆◇
◇◆◇◇◇◇◇◇◇
◇◇◇◆始◆◆◆隠
◇◆◆◆◆◆◇◇◇
◇◇◇◇◇◇◇◆◇
◇◆◇◆扉◆◇◇◇
◆◆◇◆ボ◆◇◆隠
１隠鍵◆宝◆◇◆１
`, `
◇◇◇◇１◇◇◇◇
◇◆◆◆◆◆◆◆◇
◇◆◇◇◇◇◇◇◇
◇◇◇◆始◆◆◆◆
◇◆◆◆◆◆◇◇◇
◇◇◇◇◇◇◇◆◇
◇◆扉◆◇◆◇◇◇
◇◆◇◆◆◆◇◆隠
鍵◆◇ボ宝◆鍵◆１
`]), new Map([
      ["１", new ダンジョンイベント種類("１", true, undefined, "一度きりの宝(2箇所)")],
      ["扉", new ダンジョンイベント種類("扉", false, undefined, (使用者, イベントリスト) => {
        if (使用者.職業.名前 === "盗賊") {
          if (使用者.メッセージ) {
            $com += "<br />$m{mes}";
          }
          使用者.現在地.NPCに話させる(`${使用者.名前}は細いナイフと針金のようなもので、扉のカギ穴をｶﾞﾁｬｶﾞﾁｬした！…ｶﾞﾁｬﾝｯ！なんと、扉が開いたようだ！`);
        }
        else if (イベントリスト.has("鍵")) {
          使用者.現在地.NPCに話させる(`${使用者.名前}は拾ったカギをトビラ扉に差し込んでみた！…ｺﾞｺﾞｺﾞｺﾞｺﾞ…重い音をたてて扉が開いていく！`);
        }
        else {
          使用者.現在地.NPCに話させる(`${使用者.名前}は扉を押したり引いたりしてみたが、ビクともしない…`);
          return false;
        }
        return true;
      })]
    ]));
    new ダンジョン情報("トース塔", [
      new ダンジョン階層情報("１階", 30, ["海辺の洞窟", "地獄の砂浜"], [`
凸中◇
中◆◇
◇◇◇
◆◆◇
始◇◇
`, `
凸中◇
中◆◇
◇◆◇
◇◆◇
◇始◇
`, `
凸小◇
◆◆◇
◇◇◇
◇◆◆
◇◇始
`]), new ダンジョン階層情報("２階", 40, ["海辺の洞窟", "地獄の砂浜", "魔術師の塔"], [`
◇◇◇
◇◆◇
◇◇◇
◇◆穴
◇ボ凸
`, `
◇◇◇
◇◆◇
◇◇◇
穴◆◇
凸ボ◇
`, `
◇◇◇
◆◆◇
◇◇◇
◇◆穴
◇ボ凸
` /*, `
◇◇◇
◆◆◇
◇◇◇
穴◆◇
凸8◇
    `*/]), new ダンジョン階層情報("４階[宝物庫]", 50, ["海辺の洞窟", "地獄の砂浜", "魔術師の塔", "荒野の獣道"], [`
◆◇◆
◇◇◇
◇◇◇
穴宝穴
宝◇宝
`/*, 未使用のため省略 */]), new Map([
        ["中", new ダンジョンイベント種類("中", true, undefined, (行動者) => {
          // TODO
        })],
        ["穴", new ダンジョンイベント種類("穴", false, undefined, (行動者) => {
          行動者.パーティー.前層へ();
          // TODO
        })]
      ])]);
    new ダンジョン情報("迷いの森", [
      new ダンジョン階層情報(undefined, 60, ["魔術師の塔", "荒野の獣道", "マグマ山", "妖精の森"], [`
才◇◇◇◇◇◇◇通
◇◆◇◆２◆◇◆◇
◇◇宝◆◇◆ボ◇◇
◇◆◆◆◇◆◆◆◇
◇１◇◇始①◇◇◇
◇◆◆◆②◆◆◆◇
◇罠通◆◇◆財◇◇
◇◆◇◆◇◆罠◆◇
ボ◇◇◇◇◇◇◇玉
`, `
ボ◇◇◇◇◇◇◇才
◇◆◇◆◇◆◇◆◇
◇◇通◆◇◆宝罠◇
◇◆◆◆②◆◆◆◇
◇◇◇①始◇◇１◇
◇◆◆◆◇◆◆◆◇
◇罠財◆◇◆ボ◇◇
◇◆◇◆２◆◇◆◇
玉◇◇◇◇◇◇◇通
`, `
ホ◇◇◇◇◇◇◇財
◇◆罠◆◇◆◇◆◇
◇◇ぼ◆◇◆玉◇◇
◇◆◆◆②◆◆◆◇
◇◇◇①始◇◇１◇
◇◆◆◆◇◆◆◆◇
◇◇才◆◇◆ボ罠◇
◇◆◇◆２◆◇◆◇
宝◇◇◇◇◇◇◇ほ
`, `
通◇◇◇◇◇◇◇玉
◇◆◇◆◇◆◇◆◇
◇◇ボ◆◇◆財罠◇
◇◆◆◆②◆◆◆◇
◇◇◇①始◇◇１◇
◇◆◆◆◇◆◆◆◇
◇◇宝◆◇◆通◇◇
◇◆◇◆２◆罠◆◇
才◇◇◇◇◇◇◇ボ
`, `
罠◇◇◇◇◇◇◇◇
◇◆◇◆◇◆◇◆◇
◇◇宝◆◇◆ボ◇◇
◇◆◆◆◇◆◆◆◇
◇◇通◇始◇通◇◇
◇◆◆◆◇◆◆◆◇
◇◇ボ◆◇◆財罠◇
◇◆◇◆◇◆◇◆◇
ホ◇◇◇◇◇◇◇玉
`, `
ホ◇◇◇◇◇◇◇玉
◇◆◇◆◇◆◇◆◇
◇宝ぼ◆路◆宝◇◇
◇◆◆◆◇◆◆◆◇
◇◇通◇始◇通◇◇
◇◆◆◆◇◆◆◆◇
◇◇宝◆路◆ボ◇◇
◇◆◇◆◇◆◇◆◇
◇◇◇◇◇◇◇◇罠
`, `
１◇◇◇◇◇◇◇宝
◇◆◇◆◇◆霧◆◇
◇◇ボ◆路◆民◇◇
◇◆◆◆◇◆◆◆◇
◇◇通◇始◇通◇◇
◇◆◆◆◇◆◆◆◇
◇◇宝◆路◆①◇◇
◇◆◇◆◇◆◇◆◇
罠◇◇◇◇◇◇◇ボ
`, `
ボ◇◇◇◇◇◇◇玉
◇◆霧◆◇◆◇◆◇
◇◇民◆路◆財◇◇
◇◆◆◆◇◆◆◆◇
◇◇通◇始◇通◇◇
◇◆◆◆◇◆◆◆◇
◇◇宝◆路◆ボ◇◇
◇◆◇◆◇◆◇◆◇
◇◇◇◇◇◇◇◇罠
`]), new Map([
        ["通", new ダンジョンイベント種類("通", false, undefined, (行動者, イベントリスト) => {
          // TODO
          行動者.パーティー.タイルに移動("通", false);
        })],
        ["路", new ダンジョンイベント種類("路", true, undefined, (行動者, イベントリスト) => {
          // TODO
          行動者.パーティー.タイルに移動("路", false);
        })],
        ["民", new ダンジョンイベント種類("民", true, undefined, (行動者, イベントリスト) => {
          // TODO
          行動者.パーティー.タイルに移動("罠");
        })],
        ["霧", new ダンジョンイベント種類("霧", true, undefined, (行動者, イベントリスト) => {
          // TODO
        })],
        ["中", new ダンジョンイベント種類("中", true, undefined, (行動者, イベントリスト) => {
          // TODO
        })],
      ])]); // TODO 「宝」をマップ上に表示するか
    new ダンジョン情報("死の大迷路", new ダンジョン階層情報(undefined, 70, [], [`
始掲◇◇◇◇◆◇ボボ宝
◆◆◇◆◆◇◆◇◆宝宝
◇◇◇◆◇◇◆◇◆◆◆
◇◆◆◆◇◆◆◇◆◇◇
◇◇◇◆◇癒◆◇◇◇◆
◆◆◇◆◆◆◆◆◆◇◆
◇◇◇◇◇◇◇◇◆◇◇
◇◆◆◇◆◇◆◇◇◇◆
◇◆◆◇◆◇◆◆◆◆◆
◇◇◇◇◆◇◇◇◇◇癒
`, `
始掲◇◇◇◇◆◇ボボ宝
◆◆◇◆◆◇◆◇◆◆宝
◇◇◇◆◇◇◆◇◇◆宝
◇◆◆◆◇◆◆◆◇◆◆
◇◇◇◆◇◇◇◆◇◇◇
◆◆◇◆◆◆◇◆◆◇◆
◇◇◇◇◆◇◇◇◆◇◇
◇◆◆◇◆◇◆◇◇◇◆
◇◆◆◇◆◇◆◆◆◆◆
◇◇◇◇◆◇◇◇◇◇癒
`, `
始掲◇◇◇◇◆◇ボボ宝
◆◆◇◆◆◇◆◇◆◆宝
◇◇◇◆◇◇◆◇◇◆宝
◇◆◆◆◇◆◆◆◇◆◆
◇◇◇◆◇◇◇◆◇◇◇
◆◆◇◆◆◆◇◆◆◆◇
◇◇◇◇◆◇◇◇◆◆◇
◇◆◆◇◆◇◆◇◇◆◇
◇◆◆◇◆◇◆◆◆◆◇
◇◇癒◇◆◇◇◇◇◇◇
`, `
始掲◇◇◇◇◆◇ボボ宝
◆◆◇◆◆◇◆◇◆宝宝
◇◇◇◆◇◇◆◇◆◆◆
◇◆◆◆◇◆◆◇◆◇◇
◇◇◇◆◇癒◆◇◇◇◆
◆◆◇◆◆◆◆◆◆◇◇
◇◇◇◇◇◇◇◇◆◇◆
◇◆◆◆◆◆◆癒◆◇◇
◇◆◆◇◇◇◆◆◆◆◇
◇◇◇◇◆◇◇◇◇◇◇
`, `
始掲◇◇◇◇◆宝宝宝ボ
◆◆◇◆◆◇◆◆◆◆ボ
◇◇◇◆◇◇◆◇癒◆◇
◇◆◆◆◇◆◆◇◆◆◇
◇◇◇◆◇癒◆◇◇◇◇
◆◆◇◆◆◆◆◆◆◆◇
◇◇◇◇◇◇◇◇◆◇◇
◇◆◆◇◆◆◆癒◆◇◆
◇◆◆◆◆◇◆◆◆◇◆
◇◇◇◇◇◇◇◇◇◇◇
`, `
始掲◇◇◇◇◆◇ボボ宝
◆◆◇◆◆◇◆◇◆◆宝
◇◇◇◆◇◇◆◇◇◆宝
◇◆◆◆◇◆◆◆◇◆◆
◇◇◇◆◇◇◇◆◇◇◇
◆◆◇◆◆◆◇◆◆◇◆
◇◇◇◇◇◇◇◆◇◇◇
◇◆◆◆◆◆◆◆◇◆◆
◇◆◇◇◇◇◇◆◇◆癒
◇◇◇◆◇◆◇◇◇◇◇
`, `
始掲◇◇◇◇◆◇ボボ宝
◆◆◇◆◆◇◆◇◆◆宝
◇◇◇◆◇◇◆◇◇◆宝
◇◆◆◆◇◆◆◆◇◆◆
◇◇◇◆◇◇◇◆◇◇◇
◆◆◇◆◆◆◇◆◆◆◇
◇◇◇◇◇◇◇◆癒◆◇
◇◆◆◆◆◆◆◆◇◆◇
◇◆◇◇◇◇◇◆◇◆◇
◇◇◇◆◇◆◇◇◇◇◇
`]));
    new ダンジョン情報("風の神殿", new ダンジョン階層情報(undefined, 60, [], [`
始◇◇◇◇壁毒◆宝◇矢
◇◆◆◆矢◆◆◆◆◆◇
◇◆◇◇◇◇◇◇◇◆◇
◇◆◇◆◆◆◇◆◇◆◇
◇壁◇◆操◆◇◆◇◇◇
◇◆◇◆◇◇◇◆◆◇◆
◇毒◇◆壁◆◆◆◆◇◇
◇◆◇◆壁◆宝◆◇◇壁
◇◇◇◆壁壁ボ◆本◆宝
`, `
始◇◇◇◇壁矢壁宝◇毒
◇◆◆毒◆◆◆◆◆◆◇
◇◆◇◇◇◇◇◇◇◆◇
◇毒◇◆◆◆◇◆◇◆◇
◇◆◇◆操◆◇◆◇◇◇
◇◇◇◆◇◇◇◆◇◆◇
◇◆◇◆◆◆壁◆◇◆◇
◇◆矢◆宝◆壁◆◇壁壁
◇◇◇◆ボ壁壁◆本◆宝
`, `
宝◇◇◇操◇◇◇◇◇◇
◇◆◆◆◆◆◆◆◆◆◇
◇◆始◇◇◇◇◆◇毒◇
◇◆◇◆◆◆◇◇◇◆◇
◇◆◇◆◇◇◇壁◇◇◇
矢◆◇◆◇◆◆毒◆宝◆
◇壁◇毒◇本◆◆◆◆◆
◇◆◇◆◇◆◆◇壁壁◆
◇◇◇◇◇◇◇◇◆ボ宝
`, `
宝◇◇◇◇矢◇◇◇◇◇
◇◆◆◆◆◆◆◆◆◆◇
◇◆始◇◇◇◇◆◇◇◇
操◆◇◆◆◆◇◇◇◆毒
◇◆◇◆◇◇◇壁◇◇◇
◇矢◇◆◇◆◆宝◆毒◆
◇◆◇◆◇本◆◆◆◆◆
◇◆◇◆矢◆◆◇壁壁◆
◇毒◇◇◇◇◇◇◆ボ宝
`]));
    new ダンジョン情報("賢者の小道", new ダンジョン階層情報(undefined, 30, [], [`
◇宝◇
◆ボ◆
◆◇◆
◇◇◇
A◆B
◇大◇
◆◇◆
◆◇◆
◇◇◇
C◆D
◇金◇
◆◇◆
◆◇◆
◇◇◇
E◆F
◇罠◇
◆◇◆
◆始◆
`, `
宝◇宝
◆ボ◆
◆◇◆
◇◇◇
A,◆B,
◇箱◇
◆◇◆
◆◇◆
◇◇◇
C,◆D,
◇強◇
◆◇◆
◆◇◆
◇◇◇
E,◆F,
◇猫◇
◆◇◆
◆始◆
`, `
宝◇宝
◆ボ◆
◆◇◆
◇◇◇
A,◆B,
◇ぼ◇
◆◇◆
◆◇◆
◇◇◇
◆◆D,
◇壁◇
◆◇◆
◆◇◆
◇◇◇
E,◆F,
◇運◇
◆◇◆
◆始◆
`, `
宝◇宝
◆ボ◆
◆◇◆
◇◇◇
A,◆B,
◇5,◇
◆◇◆
◆◇◆
◇◇◇
C,◆◆
◇壁◇
◆◇◆
◆◇◆
◇◇◇
E,◆F,
◇運◇
◆◇◆
◆始◆
`, `
宝◇宝
◆ボ◆
◆◇◆
◇◇◇
A,◆B,
◇小◇
◆◇◆
◆◇◆
◇◇◇
C,◆D,
◇独◇
◆◇◆
◆◇◆
◇◇◇
E,◆F,
◇財◇
◆◇◆
◆始◆
`]), new Map([
      ["大", ダンジョンイベント種類.案内板("←Yes【小さいより大きい方がいい】No→")],
      ["金", ダンジョンイベント種類.案内板("←Yes【命よりお金が大事】No→")],
      ["罠", ダンジョンイベント種類.案内板("←Yes【ワナは大嫌いだ】No→")],
      ["箱", ダンジョンイベント種類.案内板("←Yes【宝箱が大好きだ】No→")],
      ["猫", ダンジョンイベント種類.案内板("←Yes【猫より犬派だ】No→")],
      ["強", ダンジョンイベント種類.案内板("←Yes【強い敵と戦いたい】No→")],
      ["ぼ", ダンジョンイベント種類.案内板("←ボス【立て札】宝→")],
      ["壁", ダンジョンイベント種類.案内板("←壁【立て札】行き止まり→")],
      ["運", ダンジョンイベント種類.案内板("←実力【立て札】運→")],
      ["独", ダンジョンイベント種類.案内板("←全員【立て札】１人→")],
      ["財", ダンジョンイベント種類.案内板("←宝【立て札】お金→")],
      ["小", ダンジョンイベント種類.案内板("←小さい【立て札】大きい→")],
    ]));
    // 最後(6番目)のマップだけ★表示なし
    // ボス個別
    new ダンジョン情報("炎の洞窟", new ダンジョン階層情報(undefined, 60, [], [`
◇◆宝◆宝
痺◇ボ◆ボ
◆◇◆◆◇
◇◇◇◇◇
◇◆◇◆痺
◇◆ス◆◇
◇◆◇◆◆
◇◇◇◇◆
岩◆◆◇◆
◇◆熱◇ボ
宝◆◇◆操
`, `
宝◆◇◆宝
ボ◇毒◆◇
◆◇◆◆岩
◇◇◇◇◇
◇◆◇◆毒
◇◆始◆◇
◇◆◇◆◆
◇◇◇◇◆
◇◆◆◇◆
ボ◆痺◇ボ
宝◆◇◆操
`, `
◇◆◇◆宝
痺◇毒◆◇
◆◇◆◆岩
◇◇◇◇◇
◇◆◇◆ボ
◇◆始◆宝
◇◆◇◆◆
◇◇◇◇◆
◇◆◆◇◆
ボ◆ボ◇痺
宝◆操◆◇
`, `
宝◆◇◆宝
ボ◇毒◆◇
◆◇◆◆岩
◇◇◇◇◇
◇◆◇◆痺
◇◆始◆◇
◇◆◇◆◆
◇◇◇◇◆
◇◆◆◇◆
ボ◆ボ◇痺
操◆宝◆◇
`, `
宝◆宝◆◇
ボ◇ボ◆毒
◆◇◆◆◇
◇◇◇◇◇
◇◆◇◆痺
◇◆始◆◇
◇◆◇◆◆
◇◇◇◇◆
岩◆◆◇◆
◇◆ボ◇毒
宝◆操◆◇
`, `
操◆◇◆宝
ボ◇痺◆ボ
◆◇◆◆◇
◇◇◇◇◇
◇◆◇◆痺
◇◆始◆◇
◇◆◇◆◆
◇◇◇◇◆
岩◆◆◇◆
◇◆毒◇ボ
宝◆◇◆宝
`]));      // TODO
    new ダンジョン情報("絶望の砂漠", new ダンジョン階層情報(undefined, 50, [], [`
2,A,◇◇D,◇◇◇◇A,3,
A,◇◇◇◇◇◇◇◇D,◇
◇◇◇◇◇◇◇◇◇◇B,
◇◇◇飛◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇C,
◇飛◇◇◇ス飛◇◇◇◇
B,◇◇◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇◇
◇◇◇◇◇飛◇◇飛◇◇
◇C,◇◇◇◇◇◇◇4,◇
D,◇3,◇◇◇C,◇◇◇B,
`, `
◇2,◇◇◇◇◇B,3,◇◇
A,◇◇◇D,◇◇◇D,◇◇
◇◇◇◇◇◇◇◇◇◇◇
◇◇◇◇◇飛◇◇◇◇B,
◇◇飛◇◇◇◇◇◇◇◇
◇◇◇◇◇ス飛◇◇◇C,
◇◇◇◇◇◇◇◇飛◇◇
◇◇◇◇◇◇飛◇◇◇◇
◇◇◇◇◇◇◇◇◇◇4,
B,◇◇飛◇◇◇◇◇B,◇
◇C,◇◇◇◇A,◇◇C,◇
3,◇C,◇◇◇2,◇◇◇◇
`, `
2,A,◇◇D,◇◇◇◇A,3,
A,◇◇◇◇◇◇飛◇D,◇
◇◇◇◇◇◇◇◇◇◇B,
◇◇◇◇飛◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇C,
◇◇◇◇◇◇◇◇◇◇◇
B,◇◇飛◇ス◇◇◇◇◇
◇◇◇◇◇飛◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇◇
◇C,◇◇◇◇◇◇◇◇◇
D,◇3,◇◇◇◇◇◇B,◇
◇◇◇◇◇C,◇◇◇4,◇
`, `
◇◇◇◇◇3,◇◇◇◇A,3,
◇◇◇B,◇◇◇◇◇◇D,◇
◇A,◇◇◇◇◇◇◇◇◇B,
◇◇◇◇◇◇◇◇◇◇◇◇
◇◇◇◇◇飛◇◇◇◇◇C,
◇◇飛◇◇ス◇◇◇◇◇◇
B,◇◇◇◇◇飛◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇◇◇
◇◇◇◇◇飛◇◇◇◇◇◇
◇◇C,◇◇◇◇◇◇飛B,◇
◇◇3,◇D,◇C,◇◇◇4,◇
`, `
◇◇◇◇◇D,◇◇◇◇3,A,
◇◇◇3,◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇◇◇
◇◇A,◇◇◇◇◇◇◇◇◇
◇◇◇◇◇飛◇◇◇◇飛4,
◇◇◇◇◇ス◇◇◇◇◇◇
2,◇◇飛◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇◇◇
◇飛◇◇◇◇飛◇◇◇◇◇
◇◇2,◇◇◇◇◇◇◇4,◇
◇◇A,◇D,◇C,◇◇◇B,◇
`, `
◇3,◇◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇2,◇◇◇
D,◇◇◇◇◇飛◇B,◇◇
◇◇◇◇飛◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇◇
◇◇◇飛ス◇◇◇◇飛◇
◇◇◇◇◇◇◇◇◇◇◇
◇飛◇◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇4,
◇C,◇◇◇◇◇3,◇◇◇
◇◇◇◇◇◇D,◇◇◇A,
`, `
◇◇◇◇◇◇◇◇◇A,◇
◇B,◇◇◇◇◇◇◇◇4,
◇◇◇◇飛◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇◇
3,飛◇◇◇◇◇◇◇◇◇
◇◇◇◇◇ス◇飛◇◇C,
◇◇◇◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇◇
◇◇◇◇◇飛◇◇◇◇◇
◇飛◇◇◇◇◇◇◇D,◇
A,◇◇◇C,◇◇◇◇◇2,
`, `
◇◇◇◇◇◇◇◇3,◇
◇2,◇◇◇◇◇◇◇D,
◇◇◇◇飛◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇
A,◇◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇飛2,
◇◇◇飛◇ス◇◇◇◇
◇◇◇◇◇◇◇◇◇◇
◇◇◇◇◇飛◇◇◇◇
◇◇飛◇◇◇◇◇◇◇
◇◇◇◇B,◇◇C,◇D,
◇3,◇◇◇◇◇◇4,◇
`, `
4,◇◇◇◇◇◇◇◇2,
◇A,◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇飛◇◇
◇◇◇◇飛◇◇◇◇◇
D,◇◇◇ス◇◇◇◇◇
◇◇◇◇◇◇飛◇◇◇
◇◇飛◇◇◇◇◇◇C,
◇◇◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇
◇◇◇◇飛◇◇◇◇◇
B,◇◇◇◇◇◇◇◇◇
◇◇◇4,◇◇◇◇◇3,
`, `
4,◇◇◇◇◇◇◇◇A,
B,◇◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇
◇◇◇飛◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇
◇◇◇◇ス飛◇◇◇3,
◇◇飛◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇
◇◇◇◇飛◇◇◇◇◇
2,◇◇◇◇◇飛◇◇◇
◇C,◇◇◇◇4,◇◇C,
`, `
C,◇◇◇◇◇◇◇◇B,◇
◇◇◇◇◇◇◇◇◇◇A,
◇◇◇◇◇◇◇◇飛◇2,
◇◇◇飛◇◇◇◇◇◇◇
◇◇◇◇ス◇飛◇◇◇◇
◇A,◇飛◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇◇
◇◇飛◇◇◇◇◇◇飛◇
◇3,◇◇◇◇飛◇◇4,◇
◇◇A,◇◇◇◇◇D,◇◇
`, `
2,◇◇◇◇◇◇◇◇◇◇
◇C,◇◇◇飛◇◇◇2,A,
D,◇◇◇◇◇◇◇飛◇◇
◇◇◇◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇◇◇
◇A,◇◇飛ス◇◇◇◇◇
◇◇◇◇◇飛◇◇◇◇◇
◇◇◇◇◇◇◇飛◇◇◇
飛◇A,◇◇◇◇◇◇◇◇
◇◇◇◇◇◇◇◇◇D,◇
3,◇◇◇◇B,◇◇4,◇◇
`]));
    new ダンジョン情報("力の洞窟", new ダンジョン階層情報(undefined, 60, [], [`
◇◆◇◇◇◆宝
◇◆◇宝◇◆◇
◇◆◇◇◇◆◇
◇◆◆ボ◆◆◇
◇◇◇◇◇◇◇
◆◆◆◆◆◇◆
◇宝◇◆◇◇◇
◇◇◇◆◇◇◇
◇ぼ◇◆◇ぼ◇
◆◇◆◆◆◇◆
◇◇◇始◇◇◇
`, `
◇◆◇◇◇◆宝
◇◆◇宝◇◆◇
◇◆◇◇◇◆◇
◇◆◆ボ◆◆◇
◇◇◇◇◇◇◇
◆◇◆◆◆◆◆
◇◇◇◆◇宝◇
◇◇◇◆◇◇◇
◇ぼ◇◆◇ぼ◇
◆◇◆◆◆◇◆
◇◇◇始◇◇◇
`, `
宝◆◇◇◇◆◇
◇◆◇宝◇◆◇
◇◆◇◇◇◆◇
◇◆◆ボ◆◆◇
◇◇◇◇◇◇◇
◆◇◆◆◆◆◆
◇◇◇◆◇宝◇
◇◇◇◆◇◇◇
◇ぼ◇◆◇ぼ◇
◆◇◆◆◆◇◆
◇◇◇始◇◇◇
`, `
宝◆◇◇◇◆◇
◇◆◇宝◇◆◇
◇◆◇◇◇◆◇
◇◆◆ボ◆◆◇
◇◇◇◇◇◇◇
◆◆◆◆◆◇◆
◇宝◇◆◇◇◇
◇◇◇◆◇◇◇
◇ぼ◇◆◇ぼ◇
◆◇◆◆◆◇◆
◇◇◇始◇◇◇
`]));
    new ダンジョン情報("魔法の塔", [
      new ダンジョン階層情報("１階", 30, [], [`
◇凸◇
◇◇◇
◇ボ◇
◆◇◆
◆◇◆
◆◇◆
◆始◆
`]),
      new ダンジョン階層情報("２階", 30, [], [`
◆◇◆
◆◇◆
◆◇◆
◆◇◆
◇ボ◇
◇◇◇
◇凸◇
`]),
      new ダンジョン階層情報("３階", 30, [], [`
宝宝宝
◇◇◇
◇ボ◇
◆◇◆
◆◇◆
◆◇◆
◆◇◆
`]),
    ]);
    new ダンジョン情報("ヘブンズドア", new ダンジョン階層情報(undefined, 30, [], [`
宝宝宝
◆◇◆
◆◇◆
◇A,◇
◆◇◆
◆◇◆
本B,本
◆◇◆
◆◇◆
本C,本
◆◇◆
◆◇◆
本D,本
◆◇◆
◆◇◆
本E,本
◆◇◆
◆◇◆
本F,本
◆◇◆
◆◇◆
◆始◆
`]));
    new ダンジョン情報("ヘルズゲート", new ダンジョン階層情報(undefined, 30, [], [`
宝宝宝
◆◇◆
◆◇◆
◇A,◇
◆◇◆
◆◇◆
本B,本
◆◇◆
◆◇◆
本C,本
◆◇◆
◆◇◆
本D,本
◆◇◆
◆◇◆
本E,本
◆◇◆
◆◇◆
本F,本
◆◇◆
◆◇◆
◆始◆
`]));
  }
}

class ダンジョン階層情報 {
  /**
   * @param {string} 名前
   * @param {number} 限界ターン
   * @param {string[]} 敵と宝の参照元のクエストリスト
   * @param {string[]} マップ候補リスト
   * @param {string} [イベントリスト]
   */
  constructor(名前, 限界ターン, 敵と宝の参照元のクエストリスト, マップ候補リスト, イベントリスト) {

  }
}

class ダンジョンイベント種類 {
  /**
   * @param {string} タイル
   * @param {boolean} [一度きり]
   * @param {string} [表示]
   * @param {(戦闘メンバー: 戦闘メンバー, イベントリスト: Set<string>) => boolean | void} [効果]
   */
  constructor(タイル, 一度きり, 表示, 効果) {
    this.#一度きり = 一度きり;
    this.#表示 = 表示;
  }

  get 一度きり() { return this.#一度きり; }

  #一度きり;
  #表示;

  static 案内板(内容) {
    return new ダンジョンイベント種類(undefined, true, undefined, (行動者) => {
      行動者.現在地.NPCに話させる(クラス付きテキスト("strong", 内容));
      /* TODO 改行 */
    });
  }

  static #隠し通路 = new ダンジョンイベント種類("隠", false, "■");
  static #宝箱 = new ダンジョンイベント種類("宝", true, undefined);
  static #鍵 = new ダンジョンイベント種類("ボ", true, "★");
  static #本 = new ダンジョンイベント種類("本", false, undefined, (行動者, イベントリスト) => {
    if (イベントリスト.has("本")) {
      return;
    }
    行動者.現在地.NPCに話させる("テーブルの上に何やらあやしげな薬や高度な医学書が散らばっている…");
    if (行動者.職業 !== "医術師") {
      return;
    }
    イベントリスト.add("本");
    行動者.現在地.NPCに話させる(`${行動者.名前}は本に書いてあることを解読し回復薬を作り出した！全員のＨＰとＭＰが回復した！`);
    for (const 味方 of 行動者.メンバー全員(false)) {
      味方.ステータス.ＨＰ.基礎値へ();
      味方.ステータス.ＭＰ.基礎値へ();
    }
  });
  static #上り階段 = new ダンジョンイベント種類("")
}

class ダンジョン案内板 {

}

class ダンジョンタイル情報 {

  は無効化済み(発火済みイベントリスト) {
    return 発火済みイベントリスト.has(this) && this.#イベント種類.一度きり;
  }

  通過時(通過者, 発火済みイベントリスト) {
    if (this.は無効化済み(発火済みイベントリスト)) {
      return;
    }
  }

  表示用関数(発火済みイベントリスト) {
    return (this.#表示 === undefined || this.は無効化済み(発火済みイベントリスト)) ? "通路" : this.#表示; // TODO
  }

  #イベント種類;
  #表示;
}

class 宝タイル情報 extends ダンジョンタイル情報 {

}
