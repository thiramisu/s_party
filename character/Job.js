// @ts-check
"use strict";

export class 職業 {
  constructor(スキルリスト) {
    this.#名前 = this.constructor.name;
    this.#スキルリスト = スキルリスト;
  }

  set スキルリスト(スキルリスト) { this.#スキルリスト = スキルリスト; }
  get 名前() { return this.#名前; }

  をマスターした(SP) {
    return !this.#スキルリスト.values().some((スキル) => !スキル.は使用可能(SP, Infinity));
  }

  スキルを取得(スキル名, SP, ＭＰ) {
    const スキル = this.#スキルリスト.get(スキル名);
    return スキル?.は使用可能(SP, ＭＰ) ? スキル : undefined;
  }

  * 使用可能なスキルリスト(SP, ＭＰ) {
    for (const スキル of this.#スキルリスト.values()) {
      if (!スキル.は使用可能(SP, ＭＰ))
        continue;
      yield スキル;
    }
  }

  #名前;
  #スキルリスト;
}

export class 転職可能な職業 extends 職業 {
  constructor(ＨＰ成長率, ＭＰ成長率, 攻撃力成長率, 守備力成長率, 素早さ成長率, スキル, 転職条件) {
    super(スキル);
    this.#ID = 転職可能な職業.#自動ID++;
    this.#成長率 = new 成長率(ＨＰ成長率, ＭＰ成長率, 攻撃力成長率, 守備力成長率, 素早さ成長率);
    this.#転職条件 = 転職条件;
  }

  成長結果取得() {
    return this.#成長率.成長結果取得();
  }

  // 性別 === undefined なら未転職
  // SP === undefined なら未マスター
  図鑑用出力(性別, SP) {
    const
      td = document.createElement("td"),
      div = document.createElement("div"),
      img = document.createElement("img");
    div.classList.add("ジョブマスターの職業");
    if (性別 === undefined) {
      td.classList.add("未転職");
      img.src = デフォルトの職業アイコン名;
    }
    else {
      img.src = this.アイコン名を取得(性別);
      img.alt = this.名前;
    }
    if (SP !== undefined) {
      const div = document.createElement("div");
      div.classList.add("ジョブマスター済み");
      div.textContent = `★SP${SP}`;
      div.appendChild(div);
    }
    else {
      div.classList.add("未マスター");
    }
    div.appendChild(img);
    div.appendChild(document.createTextNode(this.名前));
    td.appendChild(div);
    return td;
  }

  アイコン名を取得(性別, 合体している = false) {
    return `job/${this.#ID}_${性別をアイコン名に[性別]}${合体している ? "_mix" : 空文字列}.gif`;
  }

  に転職できる(メンバー) {
    return メンバー.現職名または前職名(this.名前) || (this.#転職条件?.を満たしている(メンバー) ?? true);
  }

  get 転職条件() { return this.#転職条件; }

  static 一覧(名前, エラーを出す = true) {
    return 転職可能な職業.#一覧.get(名前) ?? ((!エラーを出す || console.error(`転職可能な職業「${名前}」は存在しません`)) ? undefined : undefined);
  }

  static * 全て() {
    for (const _転職可能な職業 of 転職可能な職業.#一覧.values()) {
      yield _転職可能な職業;
    }
  }

  static 転職先候補出力(メンバー) {
    const 断片 = document.createDocumentFragment();
    for (const _転職可能な職業 of 転職可能な職業.#一覧.values()) {
      if (!_転職可能な職業.に転職できる(メンバー)) {
        continue;
      }
      const span = document.createElement("span");
      span.textContent = _転職可能な職業.名前;
      チャットフォーム.文字列追加イベントを登録(span, `＠てんしょく>${_転職可能な職業.名前} `);
      断片.append(span, " / ");
    }
    return 断片;
  }

  static ランダム取得() {
    return ランダムな1要素(Array.from(転職可能な職業.#一覧.values()));
  }

  static 初期化() {
    転職可能な職業.#一覧 = new Map([
      new 転職可能な職業("----", 0, 0, 0, 0, 0, new 転職条件(空配列)),

      new 戦士(),
      new 剣士(),
      new 騎士(),
      new 武闘家(),
      new 僧侶(),
      new 魔法使い(),
      new 商人(),
      new 遊び人(),
      new 盗賊(),
      new 羊飼い(),
      new 弓使い(),
      new 魔物使い(),

      new 吟遊詩人(),
      new 踊り子(),
      new 黒魔道士(),
      new 白魔道士(),

      new 聖騎士(),
      new 天使(),
      new 闇魔道士(),
      new 悪魔(),

      new ﾊﾞｰｻｰｶｰ(),
      new 暗黒騎士(),

      new 竜騎士(),
      new 魔剣士(),
      new ﾓﾝｸ(),
      new 忍者(),
      new 風水士(),
      new 侍(),
      new 時魔道士(),
      new 赤魔道士(),
      new 青魔道士(),
      new 召喚士(),

      new 賢者(),

      new 勇者(),
      new 魔王(),

      new ものまね士(),
      new 結界士(),
      new ﾊﾞﾝﾊﾟｲｱ(),
      new ｽﾗｲﾑ(),
      new ﾊｸﾞﾚﾒﾀﾙ(),
      new ﾄﾞﾗｺﾞﾝ(),
      new ｱｻｼﾝ(),

      new 医術師(),

      new ﾁｮｺﾎﾞ(),
      new ﾓｰｸﾞﾘ(),

      new ｷﾞｬﾝﾌﾞﾗｰ(),

      new ｿﾙｼﾞｬｰ(),
      new 堕天使(),

      new たまねぎ剣士(),

      new ｱｲﾃﾑ士(),
      new 光魔道士(),

      new 魔人(),

      new 蟲師(),

      new 魔銃士(),
      new 妖精(),
      new ﾐﾆﾃﾞｰﾓﾝ(),
      new ｴﾙﾌ(),
      new ﾀﾞｰｸｴﾙﾌ(),
      new ｽﾗｲﾑﾗｲﾀﾞｰ(),
      new ﾄﾞﾗｺﾞﾝﾗｲﾀﾞｰ(),
      new ﾈｸﾛﾏﾝｻｰ(),
      new ﾊﾞｯﾄﾏｽﾀｰ(),
      new ｷﾉｺﾏｽﾀｰ(),
      new ｵﾊﾞｹﾏｽﾀｰ(),
      new ｹﾓﾉﾏｽﾀｰ(),
      new ﾄﾞｸﾛﾏｽﾀｰ(),
      new ﾊﾞﾌﾞﾙﾏｽﾀｰ(),
      new ｺﾛﾋｰﾛｰ(),
      new ﾌﾟﾁﾋｰﾛｰ(),

      new 天竜人(),

      new ﾁｮｺﾎﾞﾗｲﾀﾞｰ(),
      new 算術士(),

      new すっぴん()

    ].map((転職可能な職業) => [転職可能な職業.名前, 転職可能な職業]));
  }

  static ジョブマスター率を取得(ジョブマスターした職業の数) {
    return Math.trunc(ジョブマスターした職業の数 / 転職可能な職業.#一覧.size);
  }

  static get デフォルト() {
    return this.一覧("----");
  }

  #ID;
  #成長率;
  #転職条件;

  static #一覧;
  static #自動ID = 0;
  static #デフォルトの職業;
}

class 転職条件 {
  constructor(前職候補, 性別, アイテム名, 実績名, 実績以上) {
    this.#前職候補 = new Set(前職候補);
    this.#性別 = 性別;
    this.#アイテム名 = アイテム名;
    this.#実績名 = 実績名;
    this.#実績以上 = 実績以上;
  }

  を満たしている(メンバー) {
    return !!(
      (!this.#性別 || this.#性別 === this.#性別) &&
      (!this.#前職候補 || this.#前職候補.has(メンバー.現職.名前) || this.#前職候補.has(メンバー.前職?.名前)) &&
      (!this.#アイテム名 || メンバー.装備中(this.#アイテム名)) &&
      (!this.#実績名 || メンバー.実績[this.#実績名] >= this.#実績以上)
    );
  }

  消費アイテム名を取得(メンバー) {
    return this.#アイテム名;
  }

  static 職業と実績(職業名, 実績名, 実績以上) {
    return new this(職業名, undefined, undefined, 実績名, 実績以上);
  }

  static 性別(性別) {
    return new this(undefined, 性別);
  }

  static 性別とアイテム(性別, アイテム) {
    return new this(undefined, 性別, アイテム);
  }

  static アイテム(アイテム名) {
    return new this(undefined, undefined, アイテム名);
  }

  static アイテムと実績(アイテム名, 実績名, 実績以上) {
    return new this(undefined, undefined, アイテム名, 実績名, 実績以上);
  }

  static 実績(実績名, 実績以上) {
    return new this(undefined, undefined, undefined, 実績名, 実績以上);
  }

  #前職候補;
  #性別;
  #アイテム名;
  #実績名;
  #実績以上;
}

// デフォルトに忠実
class 遊び人だとアイテム消費免除だがアイテムを装備していないと候補に出ない転職条件 extends 転職条件 {
  消費アイテム名を取得(メンバー) {
    if (メンバー.現職名または前職名("遊び人")) {
      return undefined;
    }
    return super.消費アイテム名を取得(メンバー);
  }
}

class 遊び人だとアイテム消費免除の転職条件 extends 遊び人だとアイテム消費免除だがアイテムを装備していないと候補に出ない転職条件 {
  を満たしている(メンバー, 実績) {
    return メンバー.現職名または前職名("遊び人") || super.を満たしている(メンバー, 実績);
  }
}


  // 省略表記のものは基本的に初期化時に評価・決定されるので、ランダムのものは関数の中に書く必要がある(例: 僧侶の＠バギ)
  class 戦士 extends 転職可能な職業 {
    constructor() {
      super(6, 1, 3, 5, 2, [
        スキル.単体攻撃("かぶとわり", 5, 5, 属性.攻, ステータス.攻撃力, 0.9),
        new スキル("かばう", 8, 0, (使用者, 対象者) => { new 一時的状態を付与(); }), // TODO
        スキル.自身(バフスキル, "ちからをためる", 25, 8, 属性.攻, ステータス.攻撃力, 1),
        スキル.全体非依存攻撃("がんせきなげ", 50, 5, 属性.攻, 90),
        new スキル("まじんぎり", 80, 10, (使用者, 対象者) => { new 単体ダメージ(使用者, 対象者, 属性.攻, 確率(1 / 2) ? 使用者.ステータス.攻撃力 * 3 : 20); })
      ]);
    }
  }

  class 剣士 extends 転職可能な職業 {
    constructor() {
      super(4, 1, 4, 2, 3, [
        スキル.単体攻撃("しんくうぎり", 5, 3, 属性.攻, ステータス.素早さ, 1.5),
        スキル.単体(状態異常スキル, "みねうち", 10, 4, 属性.攻, 80, "動封"),
        スキル.自身一時的状態("うけながし", 20, 5, "受流し"),
        new スキル("かばう", 30),
        スキル.単体攻撃("メタルぎり", 50, 6, 属性.無, ステータス.攻撃力, 0.4),
        スキル.単体攻撃("はやぶさぎり", 80, 12, 属性.攻, ステータス.素早さ, 2.2), // TODO
        スキル.全体攻撃("さみだれぎり", 100, 21, 属性.攻, ステータス.素早さ, 1),
      ]);
    }
  }

  class 騎士 extends 転職可能な職業 {
    constructor() {
      super(6, 2, 2, 6, 2, [
        new スキル("かばう", 1),
        スキル.自身(バフスキル, "まもりをかためる", 5, 2, 属性.攻, ステータス.守備力, 0.4),
        new スキル("すてみ", 15, 5, (使用者, 対象者) => {
          使用者.チャット書き込み予約(クラス付きテキスト("tmp", `${使用者}は守りを気にせずすてみで攻撃！`));
          new 単体ダメージ(使用者, 対象者, 使用者.ステータス.攻撃力 * 2);
          使用者.一時的状態にする("２倍", null);
        }),
        スキル.自身一時的状態("だいぼうぎょ", 25, 3, "大防御"),
        スキル.全体(バフスキル, "スクルト", 20, 7, 属性.魔, ステータス.守備力, 0.25),
        new スキル("メガザル", 60, 1, 技.メガザル),
        スキル.全体攻撃("グランドクロス", 80, 18, 属性.攻, ステータス.守備力, 1.5)
      ]);
    }
  }

  class 武闘家 extends 転職可能な職業 {
    constructor() {
      super(6, 2, 2, 6, 2, [
        スキル.自身命中率リセット("せいしんとういつ", 1, 0),
        スキル.自身(バフスキル, "みかわしきゃく", 5, 3, 属性.攻, ステータス.素早さ, 0.4),
        スキル.単体攻撃("ひざげり", 14, 4, 属性.攻, ステータス.攻撃力, 1.2),
        スキル.単体(状態異常スキル, "あしばらい", 25, 3, 属性.攻, 75, "動封"),
        スキル.単体(即死スキル, "きゅうしょづき", 45, 11, 属性.攻, 19),
        スキル.単体攻撃("せいけんづき", 70, 15, 属性.攻, ステータス.攻撃力, 1.5),
        スキル.連続攻撃(3, 5, "ばくれつけん", 100, 20, 属性.攻, ステータス.攻撃力, 0.8)
      ]);
    }
  }

  class 僧侶 extends 転職可能な職業 {
    constructor() {
      super(3, 5, 2, 3, 3, [
        スキル.単体(バフスキル, "スカラ", 1, 3, 属性.魔, ステータス.守備力, 0.4),
        スキル.単体(状態異常回復スキル, "キアリー", 3, 2, 属性.魔, "猛毒"),
        スキル.単体(回復スキル, "ホイミ", 6, 3, 属性.魔, 30),
        new スキル("バギ", 12, 4, (使用者) => { 全体技.ダメージ(使用者, 30 + 25 * Math.random(), 属性.魔, true); }),
        スキル.単体(回復スキル, "ベホイミ", 24, 10, 属性.魔, 90),
        new スキル("バギマ", 45, 10, (使用者) => { 全体技.ダメージ(使用者, 40 + 25 * Math.random(), 属性.魔, true); }),
        スキル.単体(蘇生スキル, "ザオラル", 60, 20, 属性.無, 50, 50),
        スキル.単体(回復スキル, "ベホマ", 100, 30, 属性.魔, 999)
      ])
    }
  }

  class 魔法使い extends 転職可能な職業 {
    constructor() {
      super(3, 6, 1, 1, 3, [
        スキル.単体攻撃("メラ", 1, 2, 属性.魔, 20),
        スキル.単体(デバフスキル, "ルカニ", 4, 4, 属性.魔, ステータス.守備力, 0.4),
        スキル.全体非依存攻撃("ギラ", 8, 5, 属性.魔, 25),
        スキル.全体(命中率低下スキル, "マヌーサ", 14, 7, 属性.魔, 0.2),
        スキル.単体非依存攻撃("メラミ", 20, 8, 属性.魔, 70),
        スキル.単体(状態異常スキル, "ラリホー", 30, 8, 属性.魔, 65, "眠り"),
        スキル.全体非依存攻撃("ベギラマ", 55, 11, 属性.魔, 60),
        スキル.単体非依存攻撃("メラゾーマ", 90, 30, 属性.魔, 220)
      ])
    }
  }

  class 商人 extends 転職可能な職業 {
    constructor() {
      super(5, 2, 3, 4, 3, [
        new スキル("まもりをかためる", 2),
        new スキル("ゴールドハンマー", 7, 1, (使用者, _対象者) => {
          const { 対象者, 威力, 完了 } = new 単体ダメージ(使用者, _対象者, 使用者.ステータス.攻撃力 * 0.8);
          if (!完了) {
            return;
          };
          const 金額 = Math.trunc(威力 * 0.1) + 5;
          あなた._所持金.収支(金額);
          使用者.チャット書き込み予約(`${金額}を手に入れました！`)
        }),
        スキル.全体(命中率低下スキル, "すなけむり", 12, 6, 属性.息, 0.2),
        new スキル("とうぞくのはな", 20, 0, (使用者, 対象者) => { 対象者.においを取得(); }),
        スキル.反動つき単体攻撃("たいあたり", 35, 4, 属性.攻, ステータス.守備力, 1.6, 0.07),
        スキル.全体(状態異常スキル, "メダパニダンス", 65, 7, 属性.踊, 60, "混乱"),
        new スキル("メガンテ", 80, 1, (使用者, 対象者) => {
          使用者.チャット書き込み予約(クラス付きテキスト("die", `${使用者.名前}は自爆した！`));
          new 全体技(使用者, 即死スキル, 1, 属性.無, 60);
          使用者.死亡();
          使用者.ステータス.ＭＰ.現在値 = 1;
        })
      ])
    }
  }

  class 遊び人 extends 転職可能な職業 {
    constructor() {
      super(2, 1, 1, 1, 3, [
        new スキル("ねる", 1, 0, (使用者) => {
          new 回復スキル(使用者, 使用者.ステータス.ＨＰ.基礎値 * 0.5);
          使用者.チャット書き込み予約(`${使用者.名前}は眠りだした`);
          使用者.状態異常にする("眠り", false, false);
        }),
        スキル.いたずら("なげきっす", 4, "麻痺"),
        スキル.いたずら("パフパフ", 8, "動封"),
        スキル.いたずら("きけんなあそび", 12, "猛毒"),
        new スキル("ちょうはつ", 4, 0, (使用者) => {
          for (const メンバー of 対象者.メンバー全員(undefined, false, true)) {
            if (確率(1 / 2)) {
              メンバー.テンションを上げる();
            }
          }
        }),
        new スキル("からかう", 24, 0, (使用者, 対象者) => {
          if (対象者 !== undefined) {
            対象者.テンションを上げる();
            return;
          }
          new からかう(使用者);
        })
      ]);
    }
  }

  class 盗賊 extends 転職可能な職業 {
    constructor() {
      super(3, 3, 3, 1, 5, [
        スキル.単体(デバフスキル, "ボミエ", 3, 3, 属性.魔, ステータス.素早さ, 0.4),
        スキル.単体(バフスキル, "ピオラ", 6, 3, 属性.魔法, ステータス.素早さ, 0.4),
        スキル.全体(状態異常スキル, "いしつぶて", 12, 7, 属性.息, 45, "混乱"),
        new スキル("とうぞくのはな", 20),
        スキル.全体(状態異常スキル, "あまいいき", 35, 9, 属性.息, 35, "眠り"),
        new スキル("インパス", 50, 1, 技.ライブラ),
        スキル.追加効果付き単体攻撃("まひこうげき", 70, 8, 属性.攻, ステータス.攻撃力, 1.2, 状態異常スキル, 30, "麻痺"),
        スキル.単体(封印, "アーマーブレイク", 90, 15, 属性.攻, ステータス.守備力)
      ]);
    }
  }

  class 羊飼い extends 転職可能な職業 {
    constructor() {
      super(4, 3, 2, 4, 2, [
        new スキル("ねる", 1), // TODO クラス付きテキスト("state", `${使用者.名前}は眠りだした`)
        new スキル("スカラ", 1),
        new スキル("たいあたり", 35),
        new スキル("ベホイミ", 20),
        スキル.全体(状態異常スキル, "ねむりのうた", 40, 9, 属性.歌, 45, "眠り"),
        スキル.自身(一時的状態, "マホキテ", 60, 1, 属性.魔, "魔吸収"), // TODO 魔封判定はあるが混乱判定はない
        new スキル("ウールガード", 80, 7, (使用者) => { new バフスキル(使用者, 使用者, 属性.無, ステータス.守備力, 0.5); 使用者.一時的状態にする("魔軽減"); }),
        スキル.連続攻撃(2, 4, "どとうのひつじ", 100, 20, 属性.攻, ステータス.素早さ, 1.6)
      ]);
    }
  }

  class 弓使い extends 転職可能な職業 {
    constructor() {
      super(4, 3, 3, 2, 4, [
        スキル.単体(状態異常スキル, "かげぬい", 属性.攻, 80, "動封"),
        new スキル("せいしんとういつ", 10),
        スキル.全体攻撃("でたらめや", 20, 8, 属性.攻, ステータス.素早さ, 1.4),
        スキル.ＭＰ吸収("ようせいのや", 40, 4, 属性.攻, 0.15),
        スキル.追加効果付き単体攻撃("フラッシュアロー", 60, 6, 属性.攻, ステータス.攻撃力, 1.2, 命中率低下スキル, 0.07),
        スキル.追加効果付き単体攻撃("ラリホーアロー", 90, 20, 属性.攻, ステータス.攻撃力, 1.1, 状態異常スキル, 55, "眠り"),
        スキル.連続攻撃(3, 4, "みだれうち", 110, 24, 属性.攻, ステータス.攻撃力, 0.85)
      ]);
    }
  }

  class 魔物使い extends 転職可能な職業 {
    constructor() {
      super(4, 2, 2, 3, 2, [
        スキル.全体非依存攻撃("ひのいき", 3, 2, 属性.息, 18),
        スキル.全体(状態異常スキル, "もうどくのきり", 10, 7, 属性.息, 60, "猛毒"),
        スキル.全体非依存攻撃("かえんのいき", 18, 5, 属性.息, 50),
        スキル.追加効果付き単体攻撃("しびれうち", 32, 11, 属性.攻, ステータス.攻撃力, 1.1, 状態異常スキル, 40, "麻痺"),
        スキル.単体(状態異常スキル, "なめまわす", 50, 5, 属性.攻, 85, "動封"),
        スキル.全体非依存攻撃("はげしいほのお", 80, 14, 属性.息, 90),
        new スキル("そうりゅううち", 110, 12, (使用者, 対象者) => {
          for (let i = 0; (i < 2) && !使用者.は死んでいる(); i += 1) {
            new 単体ダメージ(使用者, 対象者, 属性.攻, 使用者.ステータス.攻撃力.現在値 * 1.6);
          }
        })
      ]);
    }
  }

  class 吟遊詩人 extends 転職可能な職業 {
    constructor() {
      super(4, 4, 2, 3, 4, [
        スキル.全体(デバフスキル, "ふしぎなうた", 5, 3, 属性.歌, ステータス.ＭＰ),
        スキル.全体(回復スキル, "いやしのうた", 15, 7, 属性.歌, 30),
        スキル.全体(状態異常回復スキル, "めざめのうた", 30, 5, 属性.歌, "眠り"),
        スキル.全体(バフスキル, "まもりのうた", 40, 6, 属性.歌, ステータス.守備力, 0.4),
        スキル.全体(状態異常スキル, "ねむりのうた", 60, 9, 属性.歌, 50, "眠り"),
        スキル.全体(バフスキル, "たたかいのうた", 90, 10, 属性.歌, ステータス.攻撃力, 0.6)
      ], 転職条件.性別("男"));
    }
  }

  class 踊り子 extends 転職可能な職業 {
    constructor() {
      super(3, 4, 3, 2, 5, [
        スキル.自身(バフスキル, "みかわしきゃく", 4, 3, 属性.踊, ステータス.素早さ, 0.4),
        スキル.単体(デバフスキル, "ふしぎなおどり", 9, 3, 属性.踊, ステータス.ＭＰ, 0.4),
        new スキル("うけながし", 16),
        スキル.全体攻撃("ムーンサルト", 30, 9, 属性.攻, ステータス.攻撃力, 0.8),
        new スキル("メガザルダンス", 45, 1, 技.メガザル), // TODO
        スキル.連続攻撃(2, 4, "つるぎのまい", 70, 16, 属性.踊, ステータス.攻撃力, 0.8),
        スキル.全体(回復スキル, "ハッスルダンス", 100, 12, 属性.踊, 140)
      ], 転職条件.性別("女"));
    }
  }

  class 黒魔道士 extends 転職可能な職業 {
    constructor() {
      super(3, 6, 1, 2, 3, [
        スキル.追加効果付き単体攻撃("ポイズン", 5, 6, 属性.魔, 30, 状態異常スキル, 80, "猛毒"), // TODO
        スキル.単体非依存攻撃("ファイア", 10, 5, 属性.魔, 35),
        スキル.単体(状態異常スキル, "スリプル", 20, 8, 属性.魔, "眠り", 55),
        スキル.単体(一時的状態スキル, "リフレク", 40, 7, 属性.魔, "魔反撃"),
        スキル.ＭＰ吸収("アスピル", 60, 3, 属性.魔, 0.2),
        スキル.非依存ＨＰ吸収("ドレイン", 80, 16, 属性.魔, 50, 150),
        スキル.単体非依存攻撃("フレア", 130, 40, 属性.魔, 260)
      ], 転職条件.性別("男"));
    }
  }

  class 白魔道士 extends 転職可能な職業 {
    constructor() {
      super(3, 5, 2, 2, 3, [
        スキル.単体(回復スキル, "ケアル", 5, 5, 属性.魔, 60),
        new スキル("ライブラ", 10, 2, 技.ライブラ),//TODO
        スキル.単体(状態異常スキル, "サイレス", 15, 6, 属性.魔, "魔封", 90),
        スキル.単体(回復スキル, "ケアルラ", 30, 18, 属性.魔, 180),
        スキル.単体(一時的状態スキル, "リレイズ", 60, 20, 属性.魔, "復活"),
        スキル.単体(一時的状態スキル, "シェル", 80, 5, 属性.魔, "魔軽減"),
        スキル.単体(蘇生スキル, "レイズ", 100, 40, 属性.魔, 0.25),
        スキル.単体非依存攻撃("ホーリー", 140, 35, 属性.魔, 180)
      ], 転職条件.性別("女"));
    }
  }

  class 聖騎士 extends 転職可能な職業 {
    constructor() {
      super(4, 2, 3, 5, 2, [
        new スキル("かばう", 10),
        new スキル("ホイミ", 20),
        スキル.全体(一時的状態スキル, "マジックバリア", 40, 6, 属性.魔, "魔軽減"), // TODO
        スキル.単体(状態異常回復スキル, "キアリク", 60, 5, 属性.魔, "麻痺"),
        new スキル("メガザル", 100),
        new スキル("グランドクロス", 130, 20),
        スキル.単体(蘇生スキル, "ザオリク", 160, 80, 属性.魔, 1),
      ], new 転職条件(["戦士", "剣士", "騎士", "暗黒騎士"], "男"));
    }
  }

  class 天使 extends 転職可能な職業 {
    constructor() {
      super(4, 5, 2, 3, 4, [
        new スキル("キアリー", 5),
        スキル.全体(状態異常スキル, "おどりふうじ", 15, 6, 属性.踊, 70, "踊封"),
        new スキル("めざめのうた", 30),
        スキル.単体(一時的状態スキル, "マホカンタ", 50, 5, 属性.魔, "魔反撃"),
        スキル.全体蘇生("てんしのうたごえ", 70, 27, 属性.無, 0.5, 1 / 2),
        スキル.全体(回復スキル, "ベホマラー", 90, 25, 属性.魔, 120),
        new スキル("ザオリク", 120)
      ], new 転職条件(["僧侶", "遊び人", "羊飼い", "踊り子", "白魔道士"], "女"));
    }
  }

  class 闇魔道士 extends 転職可能な職業 {
    constructor() {
      super(3, 6, 2, 1, 3, [
        スキル.全体(デバフスキル, "ルカナン", 4, 7, 属性.魔, ステータス.守備力, 0.25),
        new スキル("マホカンタ", 8),
        スキル.全体(状態異常スキル, "メダパニ", 16, 10, 属性.魔, 50, "混乱"),
        スキル.単体(即死スキル, "ザキ", 25, 14, 属性.魔, 20),
        スキル.全体(状態異常スキル, "マホトーン", 40, 10, 属性.魔, 70, "魔封"),
        スキル.全体非依存攻撃("ベギラゴン", 60, 18, 属性.魔, 125),
        スキル.ＭＰ吸収("マホトラ", 70, 2, 属性.魔, 0.25),
        スキル.全体(即死スキル, "ザラキ", 110, 32, 属性.魔, 20)
      ], new 転職条件(["魔法使い", "遊び人", "黒魔道士", "光魔道士"], "男"));
    }
  }

  class 悪魔 extends 転職可能な職業 {
    constructor() {
      super(3, 4, 3, 6, 3, [
        スキル.単体(状態異常スキル, "さそうおどり", 4, 4, 属性.踊, 85, "動封"),
        スキル.追加効果付き単体攻撃("レディウィップ", 9, 6, 属性.攻, ステータス.攻撃力, 0.9, ＭＰ回復スキル), // TODO *0.1
        new スキル("マジックバリア", 16),
        new スキル("あまいいき", 20),
        new スキル("メダパニダンス", 36),
        スキル.全体(即死スキル, "しのおどり", 60, 24, 属性.踊, 17),
        スキル.追加効果付き単体攻撃("クィーンウィップ", 100, 18, 属性.攻, ステータス.攻撃力, 1.7, 回復スキル) // TODO *0.5
      ], new 転職条件(["魔法使い", "遊び人", "暗黒騎士"], "女"));
    }
  }

  class ﾊﾞｰｻｰｶｰ extends 転職可能な職業 {
    constructor() {
      super(6, 1, 5, 3, 2, [
        new スキル("たいあたり", 10),
        スキル.自身一時的状態("うけながし", 20, undefined, "受流し", " は攻撃を受流すかまえをとった"),
        スキル.全体(状態異常スキル, "おたけび", 40, 12, 属性.攻, 60, "動封"),
        new スキル("すてみ", 60),
        スキル.反動つき単体攻撃("もろはぎり", 80, 6, 属性.攻, ステータス.攻撃力, 1.6, 0.05),
        new スキル("みなごろし", 110, 9, (使用者) => {
          let 対象者 = 確率(1 / 4) ? 使用者.ランダムなメンバーを取得(false) : 使用者.ランダムなメンバーを取得(true);
          if (対象者.は死んでいる()) {
            対象者 = 使用者;
          }
          const 威力 = Math.trunc((使用者.ステータス.攻撃力.現在値 * 3 - 対象者.ステータス.守備力.現在値 * 0.4) * (0.9 + Math.random() * 0.3) * 使用者.テンションを消費());
          対象者.ダメージ(威力, undefined, "を倒した！");
        })
      ], 転職条件.職業と実績(["戦士", "武闘家", "魔物使い"], "モンスター討伐数", 201));
    }
  }

  class 暗黒騎士 extends 転職可能な職業 {
    constructor() {
      super(4, 3, 5, 1, 2, [
        new スキル("あんこく", 10, 5, (使用者, 対象者) => {
          const 技 = new 単体ダメージ(使用者, 対象者, 属性.攻, 使用者.ステータス.攻撃力.現在値 * 1.5);
          if (!技.完了 || 技.威力 <= 0) {
            return;
          }
          使用者.反動ダメージ(使用者.ステータス.ＨＰ > 999 ? 技.威力 * 0.1 : 使用者.ステータス.ＨＰ * 0.1);
        }),
        new スキル("めいやく", 20, 9, (使用者) => {
          const 断片 = document.createDocumentFragment();
          断片.append(`${使用者.名前}の`, クラス付きテキスト("st_down", `守備力が ${v} さがりました！`));
          使用者.ステータスを下げる(ステータス.守備力, 0.5, true); // 下限なし
          使用者.チャット書き込み予約(断片);
          new バフスキル(使用者, 使用者, 属性.無, ステータス.攻撃力, 1);
        }), // TODO
        スキル.全体(状態異常スキル, "ナイトメア", 40, 16, 属性.魔, 50, "混乱"),
        スキル.追加効果付き単体攻撃("ダークブレイク", 70, 10, 属性.攻, ステータス.攻撃力, 1.2, 命中率低下スキル, 0.1),
        new スキル("あんこくけん", 140, 40, (使用者, 対象者) => {
          const 技 = new 単体ダメージ(使用者, 対象者, 属性.攻, 使用者.ステータス.攻撃力.現在値 * 1.5);
          if (!技.完了 || 技.威力 <= 0) {
            return;
          }
          使用者.反動ダメージ(使用者.ステータス.ＨＰ > 999 ? 技.威力 * 0.2 : 使用者.ステータス.ＨＰ * 0.2);
        })
      ], 転職条件.職業と実績(["剣士", "騎士", "聖騎士", "悪魔", "魔人"], "プレイヤー撃退数", 51));
    }
  }

  class 竜騎士 extends 転職可能な職業 {
    constructor() {
      super(4, 1, 3, 4, 5, [
        スキル.単体攻撃("ジャンプ", 10, 5, 属性.攻, ステータス.素早さ, 1.8),
        new スキル("ドラゴンパワー", 30, 25, (使用者) => {
          new バフスキル(使用者, 使用者, 属性.攻, ステータス.攻撃力, 0.4);
          new バフスキル(使用者, 使用者, 属性.攻, ステータス.守備力, 0.4);
        }),
        スキル.追加効果付き単体攻撃("りゅうけん", 50, 18, 属性.攻, ステータス.攻撃力, 0.9, 回復スキル),
        new スキル("ハイジャンプ", 70, 14, (使用者, 対象者) => {
          new 単体ダメージ(使用者, 対象者, 属性.攻, 使用者.ステータス.素早さ.現在値 * 2.2);
          new 単体ダメージ(使用者, undefined, 属性.攻, 使用者.ステータス.素早さ.現在値 * 2.2);
        }),
        スキル.単体攻撃("グングニル", 130, 35, 属性.攻, ステータス.攻撃力, 1.4, true)
      ], new 転職条件(["盗賊", "弓使い", "忍者"]));
    }
  }

  class 魔剣士 extends 転職可能な職業 {
    constructor() {
      super(3, 5, 4, 2, 2, [
        スキル.単体攻撃("かえんぎり", 10, 6, 属性.攻, ステータス.攻撃力, 1.2),
        new スキル("メタルぎり", 30),
        スキル.単体(バフスキル, "バイキルト", 50, 16, 属性.魔, ステータス.攻撃力, 1),
        スキル.単体攻撃("いなずまぎり", 70, 14, 属性.攻, ステータス.攻撃力, 1.5),
        スキル.単体非依存攻撃("ギガスラッシュ", 130, 25, 属性.攻, 230)
      ], new 転職条件(["剣士", "魔法使い", "赤魔道士"]));
    }
  }

  class ﾓﾝｸ extends 転職可能な職業 {
    constructor() {
      super(5, 1, 4, 3, 3, [
        スキル.全体攻撃("まわしげり", 5, 8, 属性.攻, ステータス.攻撃力, 0.8),
        new スキル("チャクラ", 15, 3, (使用者) => { new 回復スキル(使用者, 使用者, 属性.攻, 100); 使用者.命中率を初期値に(null); }),
        new スキル("すてみ", 30, 15, (使用者, 対象者) => {
          使用者.チャット書き込み予約(クラス付きテキスト("st_down", `${使用者}は守りを気にせずすてみで攻撃！`));
          new 単体ダメージ(使用者, 対象者, 使用者.ステータス.攻撃力 * 2);
          使用者.一時的状態にする("２倍", null);
        }),
        スキル.自身一時的状態("カウンター", 50, 5, "攻反撃"),
        new スキル("だいぼうぎょ", 70),
        スキル.全体非依存攻撃("しんくうは", 90, 12, 属性.攻, 120),
        new スキル("におうだち", 110, 0, (使用者) => {
          for (const 味方 of 使用者.メンバー全員(false, undefined, true)) {
            味方.一時的状態にする("かばう", null);
          }
          使用者.一時的状態にする("かばい中");
        }),
        スキル.自身一時的状態("きしかいせい", 130, 7, "復活", "は死ぬ気のオーラにつつまれた！")
      ], new 転職条件(["武闘家", "魔物使い", "ﾊﾞｰｻｰｶｰ"]));
    }
  }

  class 忍者 extends 転職可能な職業 {
    constructor() {
      super(3, 3, 3, 2, 6, [
        new スキル("かえんのいき", 5),
        スキル.全体(状態異常スキル, "やけつくいき", 15, 10, 属性.息, 35, "麻痺"),
        new スキル("マヌーサ", 30),
        new スキル("もうどくのきり", 40),
        スキル.全体(バフスキル, "ピリオム", 50, 6, 属性.魔, ステータス.素早さ, 0.25),
        new スキル("きゅうしょづき", 65),
        スキル.自身(バフスキル, "しのびあし", 80, 10, 属性.無, ステータス.素早さ, 1),
        new スキル("アーマーブレイク", 110)
      ], new 転職条件(["盗賊", "弓使い", "竜騎士", "蟲師"]));
    }
  }


  class 風水士 extends 転職可能な職業 {
    constructor() {
      super(4, 3, 2, 4, 4, [
        new スキル("すなけむり", 5),
        スキル.単体非依存攻撃("かまいたち", 15, 5, 属性.無, 80),
        スキル.全体(デバフスキル, "ボミオス", 25, 6, 属性.魔, ステータス.素早さ, 0.3),
        スキル.単体非依存攻撃("ヒャダルコ", 40, 11, 属性.魔, 80),
        スキル.全体(状態異常回復スキル, "ザメハ", 55, 4, 属性.魔, "眠り"),
        スキル.全体一時的状態("おいかぜ", 70, 5, 属性.無, "息反撃"),
        スキル.全体非依存攻撃("マヒャド", 90, 27, 属性.魔, 160),
        スキル.単体(封印, "ウェポンブレイク", 110, 15, 属性.攻, ステータス.攻撃力),
      ], new 転職条件(["商人", "遊び人", "羊飼い"]));
    }
  }

  class 侍 extends 転職可能な職業 {
    constructor() {
      super(4, 2, 4, 3, 4, [
        new スキル("せいしんとういつ", 5), // TODO
        new スキル("みねうち", 15, 3), // TODO
        new スキル("うけながし", 20),
        new スキル("ぜになげ", 50, 0, (使用者) => { 全体技.ダメージ(使用者, 属性.攻, あなた.メンバー.収支(-100, true) ? 180 : 50, true) }), // TODO 
        スキル.自身一時的状態("しらはどり", 70, 4, "攻無効"),
        スキル.全体(状態異常スキル, "いあいぎり", 100, 20, 属性.攻, 65, "動封"),
        スキル.単体(即死スキル, "ざんてつけん", 140, 10, 属性.攻, 25)
      ], new 転職条件(["剣士", "魔剣士", "忍者"]));
    }
  }

  class 時魔道士 extends 転職可能な職業 {
    constructor() {
      super(3, 5, 1, 2, 4, [
        スキル.単体(デバフスキル, "スロウ", 10, 4, 属性.魔, ステータス.素早さ, 0.45),
        スキル.単体(バフスキル, "ヘイスト", 20, 4, 属性.魔, ステータス.素早さ, 0.45),
        スキル.非依存連続攻撃(2, 3, "コメット", 30, 14, 属性.魔, 50),
        スキル.全体(デバフスキル, "スロウガ", 50, 9, 属性.魔, ステータス.素早さ, 0.35),
        スキル.全体(バフスキル, "ヘイスガ", 70, 9, 属性.魔, ステータス.素早さ, 0.35),
        スキル.単体(デバフスキル, "グラビデ", 110, 30, 属性.魔, ステータス.ＨＰ, 0.5),
        スキル.非依存連続攻撃(4, 6, "メテオ", 150, 50, 属性.魔, 99)
      ], new 転職条件(["吟遊詩人", "踊り子", "黒魔道士", "白魔道士"]));
    }
  }

  class 赤魔道士 extends 転職可能な職業 {
    constructor() {
      super(4, 3, 4, 3, 3, [
        new スキル("ケアル", 10),
        new スキル("ファイア", 20),
        new スキル("シェル"),
        スキル.全体非依存攻撃("ファイラ", 60, 11, 属性.魔, 80),
        new スキル("リフレク", 80),
        new スキル("ケアルラ", 100),
        new スキル("リレイズ", 120),
        スキル.非依存連続攻撃(2, 2, "れんぞくまほう", 150, 40, 属性.魔, 180)
      ], new 転職条件(["黒魔道士", "白魔道士", "時魔道士"]));
    }
  }

  class 青魔道士 extends 転職可能な職業 {
    constructor() {
      super(3, 4, 2, 2, 5, [
        new スキル("じばく", 11, 11, (使用者, 対象者) => {
          使用者.チャット書き込み予約(クラス付きテキスト("die", `${使用者.名前}は自爆した！`));
          new 単体ダメージ(使用者, 対象者, 属性.魔, 使用者.ステータス.ＨＰ.現在値);
          使用者.死亡(true);
        }),
        new スキル("しのルーレット", 44, 4, (使用者, 対象者) => {
          // TODO
        }),
        new スキル("？？？？", 66, 18, (使用者, 対象者) => {
          const ＨＰ = 使用者.ステータス.ＨＰ;
          new 単体ダメージ(使用者, 対象者, 属性.魔, ＨＰ.基礎値 - ＨＰ.現在値 + 5);
        }),
        new スキル("マイティガード", 77, 34, (使用者) => {
          new 全体技(使用者, バフスキル, 1, 属性.魔, 0.5, ステータス.守備力);
          for (const 味方 of 使用者.メンバー全員(false, false)) {
            味方.一時的状態にする("魔軽減");
          }
        }),
        new スキル("ＭＰ４グラビガ", 94, 24, (使用者) => {
          // TODO 魔封チェック
          for (const メンバー of 使用者.メンバー全員(undefined, false)) {
            const 現在ＭＰ = メンバー.ステータス.ＭＰ.現在値;
            if (現在ＭＰ !== 0 && 現在ＭＰ % 4 === 0 && !メンバー.即死耐性を持っている()) {
              const ＨＰ = メンバー.ステータス.ＨＰ;
              ＨＰ.現在値 = Math.max(1, Math.trunc(ＨＰ.現在値 * 0.25));
              使用者.チャット書き込み予約(`${メンバー.名前}は<span class="st_down">ＨＰが1/4になった！</span>`); // TOSO
            }
          }
        }),
        new スキル("ホワイトウィンド", 121, 36, (使用者) => {
          new 全体技(使用者, 回復スキル, 1, 使用者.ステータス.ＨＰ.現在値);
        }),
        new スキル("ＭＰ５デス", 155, 25, (使用者) => {
          // TODO 魔封チェック
          for (const メンバー of 使用者.メンバー全員(undefined, false)) {
            const 現在ＭＰ = メンバー.ステータス.ＭＰ.現在値;
            if (現在ＭＰ !== 0 && 現在ＭＰ % 5 === 0 && !メンバー.即死耐性を持っている()) {
              メンバー.死亡();
              使用者.チャット書き込み予約(クラス付きテキスト("die", `${対象者}は死んでしまった！`));
            }
          }
        })
      ], new 転職条件(["遊び人", "吟遊詩人", "踊り子", "風水士"]));
    }
  }

  class 召喚士 extends 転職可能な職業 {
    constructor() {
      super(3, 6, 1, 2, 3, [
        new スキル("チョコボ", 5, 5, (使用者, 対象者) => {
          const 当たり = 確率(1 / 4);
          使用者.チャット書き込み予約(`＠${当たり ? "デブチョコボ" : "チョコボキック"}＠`);
          new 単体ダメージ(使用者, 対象者, 属性.魔, 当たり ? 100 : 30);
        }),
        new スキル("シルフ", 25, 10, (使用者) => {
          使用者.チャット書き込み予約("＠癒しの風＠");
          new 全体技(使用者, 1, 回復スキル, 属性.魔, 50);
        }),
        new スキル("ゴーレム", 50, 20, (使用者) => {
          使用者.状態異常.技発動時チェック({ 属性: 属性.魔 });
          使用者.チャット書き込み予約("＠守りの壁＠");
          for (const 味方 of 使用者.メンバー全員(false, false)) {
            味方.一時的状態にする("攻軽減");
          }
        }),
        new スキル("カーバンクル", 70, 30, (使用者) => {
          使用者.状態異常.技発動時チェック({ 属性: 属性.魔 });
          使用者.チャット書き込み予約("＠ルビーの光＠");
          for (const 味方 of 使用者.メンバー全員(false, false)) {
            味方.一時的状態にする("魔反撃", "は魔法の壁に守られた！");
          }
        }),
        new スキル("フェニックス", 100, 40, (使用者) => {
          使用者.状態異常.技発動時チェック({ 属性: 属性.魔 });
          使用者.チャット書き込み予約("＠転生の炎＠");
          for (const 味方 of 使用者.メンバー全員(false, true)) {
            味方.蘇生(0.15, 召喚士.#フェニックス);
          }
        }),
        new スキル("バハムート", 150, 50, (使用者) => {
          使用者.チャット書き込み予約("＠メガフレア＠");
          new 全体技(使用者, 1, 単体ダメージ, 属性.魔, 220);
        })
      ], new 転職条件(["闇魔道士", "悪魔", "時魔道士"]));
    }

    static #フェニックス(戦闘メンバー) {
      return クラス付きテキスト("revive", `${戦闘メンバー}が生き返った！`);
    }
  }

  class 賢者 extends 転職可能な職業 {
    constructor() {
      super(3, 5, 1, 2, 2, [
        new スキル("マジックバリア", 5),
        スキル.全体非依存攻撃("イオラ", 15, 12, 属性.魔, 70),
        スキル.全体一時的状態("フバーハ", 30, 7, 属性.魔, "息軽減"),
        new スキル("ベホマラー", 70),
        new スキル("バイキルト", 100),
        スキル.全体非依存攻撃("イオナズン", 130, 34, 属性.魔, 160),
        new スキル("ザオリク", 160)
      ], 遊び人だとアイテム消費免除の転職条件.アイテム("賢者の悟り"));
    }
  }

  class 勇者 extends 転職可能な職業 {
    constructor() {
      super(5, 2, 4, 4, 2, [
        new スキル("かばう", 10),
        スキル.単体非依存攻撃("ライデイン", 30, 15, 属性.魔, 110),
        スキル.自身(回復スキル, "めいそう", 60, 25, 属性.無, 300),
        スキル.全体非依存攻撃("ギガデイン", 90, 40, 属性.魔, 180),
        スキル.自身(一時的状態スキル, "アストロン", 120, 6, 属性.魔, "魔無効"), // 魔封判定はあるが混乱判定はない
        スキル.全体(回復スキル, "ベホマズン", 150, 80, 属性.魔, 999),
        new スキル("ミナデイン", 180, 30, (使用者, 対象者) => {
          new ミナデイン(使用者, 対象者, 属性.魔, 100, 15, 85);
        })
      ], 転職条件.アイテムと実績("勇者の証", "勇者熟練度", 5));
    }
  }

  class 魔王 extends 転職可能な職業 {
    constructor() {
      super(4, 5, 3, 4, 4, [
        new スキル("うけながし", 10), //TODO ＭＰ違い, 表記ゆれ
        new スキル("いてつくはどう", 30, 30, 技.全体リセット),
        new スキル("ザキ", 60),
        スキル.全体非依存攻撃("しゃくねつ", 90, 40, 属性.息, 180),
        new スキル("めいそう", 120),
        new スキル("アストロン", 150),
        スキル.全体非依存攻撃("ジゴスパーク", 180, 70, 属性.魔, 150, 状態異常スキル, 属性.魔, 20, "麻痺")
      ], 転職条件.アイテムと実績("邪神像", "魔王熟練度", 1));
    }
  }

  class ものまね士 extends 転職可能な職業 {
    constructor() {
      super(3, 3, 3, 3, 3, [
        ものまね士.#ものまね("おどる", 10, "踊", "踊る"),
        ものまね士.#ものまね("ぶれす", 20, "息", "息を吐く"),
        ものまね士.#ものまね("まほう", 40, "魔", "魔法を唱える"),
        ものまね士.#ものまね("こうげき", 60, "攻", "攻撃する"),
        new スキル("モシャス", 100, 50, (使用者, 対象者 = 使用者.ランダムなメンバーを取得()) => {
          if (対象者.は死んでいる() || 対象者.はメタル耐性を持っている(false) || 対象者.ステータス.ＨＰ.現在値 > 999) {
            return;
          }
          使用者.モシャス(対象者);
          使用者.チャット書き込み予約(クラス付きテキスト("st_up", `${使用者.名前}は${対象者.名前}に姿を変えました！`));
        })
      ], 転職条件.アイテム("ﾏﾈﾏﾈの心"));
    }

    static #ものまね(属性動作ひらがな, SP, 属性名, 属性動作) {
      return new スキル(`${属性動作ひらがな}`, SP, 5, (使用者) => {
        使用者.一時的状態にする(`${属性名}反撃`, null);
        const テキスト = クラス付きテキスト("tmp", `${使用者.名前}は${属性動作}まねをはじめた！`);
        使用者.チャット書き込み予約(テキスト);
      });
    }
  }

  class 結界士 extends 転職可能な職業 {
    constructor() {
      super(3, 5, 3, 5, 3, [
        new スキル("マホトーン", 5),
        new スキル("マホキテ", 10),
        new スキル("おどりふうじ", 15),
        new スキル("マジックバリア", 6),
        new スキル("マホカンタ", 40),
        スキル.単体(状態異常スキル, "じゅばく", 60, 7, 属性.無, 80, "攻封"),
        new スキル("めいそう", 80),
        new スキル("ふういん", 100, 15, (使用者, 対象者) => {
          new 封印2(使用者, 対象者, 属性.攻);
        })
      ], 転職条件.アイテム("精霊の守り"));
    }
  }

  class ﾊﾞﾝﾊﾟｲｱ extends 転職可能な職業 {
    constructor() {
      super(3, 4, 4, 1, 5, [
        new スキル("きゅうけつ", 10, 12, (使用者) => {
          // TODO
        }),
        new スキル("アスピル", 20),
        new スキル("アストロン", 30),
        new スキル("めいやく", 60), // TODO
        new スキル("あまいいき", 90),
        スキル.非依存ＨＰ吸収("ギガドレイン", 130, 37, 属性.魔,) // TODO
      ], 転職条件.アイテム("伯爵の血"));
    }
  }

  class ｽﾗｲﾑ extends 転職可能な職業 {
    constructor() {
      super(3, 4, 2, 3, 4, [
        new スキル("ギラ", 3),
        new スキル("スクルト", 7),
        new スキル("ホイミ", 11),
        new スキル("ルカナン", 16),
        new スキル("ザオラル", 50),
        new スキル("しゃくねつ", 99)
      ], 転職条件.アイテム("ｽﾗｲﾑの心"));
    }
  }

  class ﾊｸﾞﾚﾒﾀﾙ extends 転職可能な職業 {
    constructor() {
      super(1, 7, 1, 7, 7, [
        new スキル("メラミ", 25),
        new スキル("ベギラマ", 50),
        new スキル("マダンテ", 99, 1, (使用者) => {
          全体技.ダメージ(使用者, 属性.魔, 使用者.ステータス.ＭＰ.現在値 * 2);
          使用者.ステータス.ＭＰ.現在値 = 0;
        })
      ], 転職条件.アイテム("ﾊｸﾞﾚﾒﾀﾙの心"));
    }
  }

  class ﾄﾞﾗｺﾞﾝ extends 転職可能な職業 {
    constructor() {
      super(6, 1, 6, 6, 1, [
        スキル.全体非依存攻撃("つめたいいき", 10, 1, 属性.息, 15),
        スキル.全体非依存攻撃("こおりのいき", 30, 6, 属性.息, 55),
        スキル.全体非依存攻撃("こごえるふぶき", 60, 14, 属性.息, 115),
        new スキル("やけつくいき", 90, 9),
        スキル.全体非依存攻撃("かがやくいき", 120, 34, 属性.息, 195)
      ], 転職条件.アイテム("ﾄﾞﾗｺﾞﾝの心"));
    }
  }

  class ｱｻｼﾝ extends 転職可能な職業 {
    constructor() {
      super(3, 2, 5, 1, 6, [
        スキル.単体(状態異常スキル, "コンフュ", 15, 7, 属性.魔, 80, "混乱"),
        new スキル("サイレス", 30),
        new スキル("しのびあし", 55),
        スキル.追加効果付き単体攻撃("どくこうげき", 80, 4, 属性.攻, ステータス.攻撃力, 1.1, 状態異常スキル, 70, "猛毒"),
        スキル.追加効果付き単体攻撃("まひこうげき", 70, 8, 属性.攻, ステータス.攻撃力, 1.2, 状態異常スキル, 35, "麻痺"),
        new スキル("しのせんこく", 120, 42, (使用者, 対象者) => {
          // デフォルトに忠実: テンションを下げない TODO
        }),
        new スキル("あんさつけん", 150, 24, (使用者) => {
          属性.攻
        }),
      ], 転職条件.アイテム("闇のﾛｻﾞﾘｵ"));
    }
  }

  class 医術師 extends 転職可能な職業 {
    constructor() {
      super(4, 4, 1, 3, 3, [
        スキル.全体(状態異常回復スキル, "どくちりょう", 5, 2, 属性.無, "猛毒"),
        スキル.全体(状態異常回復スキル, "まひちりょう", 10, 3, 属性.無, "麻痺"),
        new スキル("めざめのうた", 20),
        スキル.単体(一時的状態スキル, "リジェネ", 40, 7, 属性.魔, "回復"),
        スキル.単体(状態異常回復スキル, "エスナ", 70, 10, 属性.無),
        スキル.単体(回復スキル, "ケアルガ", 110, 35, 属性.魔, 400),
        スキル.単体(蘇生スキル, "アレイズ", 150, 70, 属性.魔, 1, 1)
      ], new 転職条件(["僧侶", "羊飼い", "白魔道士", "光魔道士"]));
    }
  }

  class ﾁｮｺﾎﾞ extends 転職可能な職業 {
    constructor() {
      super(6, 1, 3, 2, 5, [
        スキル.単体攻撃("チョコボキック", 20, 4, 属性.攻, ステータス.攻撃力, 1.4),
        スキル.自身(バフスキル, "チョコガード", 40, 5, 属性.無, 0.5, ステータス.守備力),
        スキル.反動つき単体攻撃("チョコアタック", 60, 8, 属性.攻, ステータス.守備力, 2, 7),
        スキル.単体非依存攻撃("チョコボール", 80, 14, 属性.魔, 170),
        スキル.単体(回復スキル, "チョコケアル", 100, 7, 属性.魔, 150),
        スキル.単体攻撃("チョコボックル", 120, 15, 属性.魔, ステータス.素早さ, 1.5)
      ], 転職条件.アイテム("ｷﾞｻﾞｰﾙの野菜"));
    }
  }

  class ﾓｰｸﾞﾘ extends 転職可能な職業 {
    constructor() {
      super(3, 4, 2, 4, 4, [
        new スキル("おまじない", 10, 5, (使用者, 対象者) => { new 命中率回復スキル(使用者, 対象者, 属性.無); }), // TODO
        スキル.単体(状態異常スキル, "ストップ", 30, 8, 属性.魔, 85, "動封"),
        new スキル("ウールガード", 50),
        スキル.ＭＰ吸収("マホトラおどり", 70, 3, 属性.踊, 0.18),
        new スキル("カエルのうた", 90, 30, (使用者, 対象者) => {
          const 技 = new デバフスキル(使用者, 対象者, 属性.歌, ステータス.攻撃力, 0.4);
          if (!技.完了) {
            return;
          }
          new デバフスキル(使用者, 技.対象者, 属性.歌, ステータス.守備力, 0.4);
          技.対象者.アイコン = "chr/022.gif";
          使用者.チャット書き込み予約(`${技.対象者.名前}はカエルの姿になった！`);
        }),
        new スキル("リジェネ", 40),
        スキル.単体非依存攻撃("アルテマチャージ", 150, 40, 属性.攻, 300)
      ], 転職条件.アイテム("ｸﾎﾟの実"));
    }
  }

  class ｷﾞｬﾝﾌﾞﾗｰ extends 転職可能な職業 {
    constructor() {
      super(3, 5, 3, 1, 5, [
        new スキル("ヘブンスロット", 10, 7, (使用者) => {
          const
            記号の数 = カジノのスロットの記号リスト.length,
            結果 = [整数乱数(記号の数), 整数乱数(記号の数), 整数乱数(記号の数)],
            最初の記号 = カジノのスロットの記号リスト[結果[0]].記号;
          使用者.チャット書き込み予約(`【${最初の記号}】【${カジノのスロットの記号リスト[結果[1]].記号}】【${カジノのスロットの記号リスト[結果[2]].記号}】`);
          if (結果[0] == 結果[1] && 結果[1] == 結果[2]) {
            if (最初の記号 === "７") {
              new 全体技(使用者, 即死スキル, 1, 属性.無, 90);
              return;
            }
            const 威力 = (結果[0] + 2) * 100;
            new 全体技(使用者, (最初の記号 === "∞" || 最初の記号 === "†") ? 回復スキル : 単体ダメージ, 1, 属性.無, 威力);
            return;
          }
          const 威力 = Math.trunc((結果[0] + 結果[1] + 結果[2]) * 7);
          new 全体技(使用者, 単体ダメージ, 1, 属性.無, 威力, true);
        }),
        スキル.単体(即死スキル, "いちげきのダーツ", 30, 14, 属性.攻, 20),
        new スキル("あくまのダイス", 60, 6, (使用者, 対象者) => {
          const
            結果 = [整数乱数(6, 1, true), 整数乱数(6, 1, true), 整数乱数(6, 1, true)],
            威力 = Math.trunc((結果[0] * 100 + 結果[1] * 10 + 結果[0]) * 0.5);
          使用者.チャット書き込み予約(`[${結果[0]}][${結果[1]}][${結果[2]}]`);
          new 単体ダメージ(使用者, 対象者, 属性.魔, 威力, true);
          使用者.反動ダメージ((6 - 結果[0]) * 10 + (6 - 結果[1]) + (6 - 結果[2]) * 0.1);
        }),
        new スキル("しのルーレット", 80), // TODO 表記ゆれ
        new スキル("イカサマのダイス", 140, 36, (使用者, 対象者) => {
          const
            結果 = [整数乱数(3, 1, true), 整数乱数(6, 1, true), 整数乱数(6, 1, true)],
            威力 = 結果[0] * 100 + 結果[1] * 10 + 結果[0];
          使用者.チャット書き込み予約(`[${結果[0]}][${結果[1]}][${結果[2]}]`);
          new 単体ダメージ(使用者, 対象者, 属性.魔, 威力, true);
        })
      ], 遊び人だとアイテム消費免除だがアイテムを装備していないと候補に出ない転職条件.アイテムと実績("ｷﾞｬﾝﾌﾞﾙﾊｰﾄ", "カジノ熟練度", 10));
    }
  }

  class ｿﾙｼﾞｬｰ extends 転職可能な職業 {
    constructor() {
      super(6, 1, 6, 4, 4, [
        スキル.単体攻撃("ブレイバー", 20, 5, 属性.攻, ステータス.攻撃力, 1.2),
        スキル.反動つき単体攻撃("きょうぎり", 50, 9, 属性.攻, ステータス.攻, 1.6, 6),
        new スキル("メテオレイン", 80, 20, (使用者, _対象者) => {
          const { 対象者 } = new 単体ダメージ(使用者, _対象者, 属性.攻, 使用者.ステータス.攻撃力.現在値 * 1.8);
          使用者.ステータスを下げる(ステータス.攻撃力, 0.1); // TODO 下限なし
        }),
        new スキル("クライムハザード", 120, 36, (使用者) => {
          new クライムハザード(使用者, 対象者, 属性.攻, 400);
        }),
        スキル.連続攻撃(4, 4, "ちょうきゅうぶしんはざん", 160, 40, 属性.攻, ステータス.攻撃力, 1)
      ], 転職条件.性別とアイテム("男", "ｼﾞｪﾉﾊﾞ細胞"));
    }
  }

  class 堕天使 extends 転職可能な職業 {
    constructor() {
      super(3, 5, 4, 2, 3, [
        new スキル("バイオガ", 40, 56, (使用者) => {
          全体技.ダメージ(使用者, 属性.魔, 120);
          new 全体技(使用者, 状態異常スキル, 1, 属性.魔, 40, "猛毒");
        }),
        new スキル("やみのてんし", 80, 66, (使用者) => {
          new 全体技(使用者, 単体ダメージ, 1, 属性.魔, 70);
          new 全体技(使用者, 状態異常スキル, 1, 属性.魔, 30, "眠り");
        }),
        new スキル("シャドウフレア", 120, 66, (使用者) => {
          属性.魔
        }), // TODO
        new スキル("こころないてんし", 160, 44, (使用者, 対象者) => {

        }), // TODO
        スキル.全体攻撃("はっとういっせん", 200, 46, 属性.攻, ステータス.攻撃力, 1.2)
      ], 転職条件.性別とアイテム("女", "ｼﾞｪﾉﾊﾞ細胞"));
    }
  }

  class たまねぎ剣士 extends 転職可能な職業 {
    constructor() {
      super(0, 0, 0, 0, 0, [
        スキル.単体(状態異常回復スキル, "リボン", 100, 10, 属性.無),
        new スキル("オニオンシールド", 200, 20, (使用者) => {
          new バフスキル(使用者, 使用者, 属性.攻.ステータス.守備力, 0.6); // TODO tryいるかも
          使用者.一時的状態にする("攻軽減", (使用者) => クラス付きテキスト("tmp", `${使用者.名前}は守りを固めた！`));
        }),
        スキル.単体攻撃("オニオンソード", 300, 30, 属性.攻, ステータス.攻撃力, 1.6)
      ]);
    }

    に転職できる(メンバー) {
      return メンバー.現職名または前職名(this.名前) || メンバー.現職.SP > 300;
    }

    成長結果取得(メンバー) {
      const SP = メンバー.現職.SP;
      return 成長率.成長結果取得(new ステータス(
        SP * 0.02,
        SP * 0.02,
        SP * 0.02,
        SP * 0.02,
        SP * 0.02
      ));;
    }
  }

  class ｱｲﾃﾑ士 extends 転職可能な職業 {
    constructor() {
      super(3, 4, 2, 3, 4, [
        スキル.単体(回復スキル, "ポーション", 10, 5, 属性.魔, 80),
        new スキル("キュアブラインド", 25, 3, (使用者, 対象者) => {
          new 命中率回復スキル(使用者, 対象者, 属性.魔);
        }), // TODO テキスト
        new スキル("ドラゴンアーマー", 55, 10, (使用者, 対象者) => {
          const 技 = new バフスキル(使用者, 対象者, 属性.魔, ステータス.守備力, 0.4);
          技.対象者.一時的状態にする("息軽減");
        }),
        スキル.単体(回復スキル, "ハイポーション", 75, 24, 属性.魔, 200),
        スキル.単体(ＭＰ回復スキル, "エーテル", 110, 50, 属性.魔, 50),
        new スキル("ラストエリクサー", 145, 1, (使用者, 対象者) => {
          使用者.チャット書き込み予約(クラス付きテキスト("die", `${使用者}は自分の命をささげました！`));
          対象者.必要なら生き返ってからＨＰ全回復(); // TODO テキスト
          対象者.ステータス.ＭＰ.基礎値へ();
          使用者.死亡(true, false);
          使用者.ＭＰ減少(Infinity, null);
        })
      ], new 転職条件(["商人", "風水士", "医術士"]));
    }
  }

  class 光魔道士 extends 転職可能な職業 {
    constructor() {
      super(3, 5, 2, 3, 4, [
        スキル.全体(命中率低下スキル, "まぶしいひかり", 10, 6, 属性.魔, 0.2),
        new スキル("ひかりのみちびき", 30, 11, (使用者) => {
          for (const 味方 of 使用者.メンバー全員(false)) {
            味方.命中率を初期値に(null);
          }
          使用者.チャット書き込み予約(クラス付きテキスト("st_up", `${使用者.名前}たちの命中率が回復した`));
        }),
        スキル.全体(回復スキル, "いやしのひかり", 50, 14, 属性.魔, new 範囲(50, 99)), // TODO 範囲
        スキル.全体ランダム状態異常("あやしいひかり", 80, 16, 属性.魔, 50, ["混乱", "眠り"]),
        スキル.全体非依存攻撃("ひかりのさばき", 110, 34, 属性.魔, 170),
        スキル.全体蘇生("きぼうのひかり", 130, 30, 属性.無, 1, 1 / 5),
        new スキル("ぜつぼうのひかり", 160, 46, (使用者) => {
          new 全体技(使用者, 即死スキル, 1, 属性.魔, 10);
          全体技.ダメージ(使用者, 属性.魔, 70);
        })
      ], new 転職条件(["白魔道士", "聖騎士", "天使", "闇魔道士", "賢者"]));
    }
  }

  // ここから重複確認済み
  class 魔人 extends 転職可能な職業 {
    constructor() {
      super(5, 2, 5, 2, 3, [
        new スキル("ひざげり", 20),
        new スキル("ちからをためる", 50),
        new スキル("アーマーブレイク", 80),
        new スキル("きあいため", 130, 20, (使用者) => {
          使用者.一時的状態にする("２倍");
          使用者.テンションを上げる();
          使用者.テンションを上げる();
        }),
        new スキル("だいぼうそう", 150, 30, (使用者) => {
          全体技.ダメージ(使用者, 属性.攻, 200);
          使用者.一時的状態にする("２倍");
        })
      ], 転職条件.職業と実績(["戦士", "ﾊﾞｰｻｰｶｰ", "ﾓﾝｸ"], "モンスター討伐数", 1001));
    }
  }

  class 蟲師 extends 転職可能な職業 {
    constructor() {
      super(4, 3, 3, 4, 5, [
        スキル.単体(状態異常スキル, "くものいと", 5, 3, 属性.息, 80, "動封"),
        スキル.単体(状態異常スキル, "どくのいと", 15, 4, 属性.息, 80, "猛毒"),
        スキル.全体ランダム状態異常("むしのいき", 30, 16, 属性.息, 60, ["猛毒", "麻痺", "眠り"]),
        スキル.単体(一時的状態スキル, "あくまのわな", 55, 15, 属性.息, "攻反撃", "は特殊な糸で守られた！"),
        スキル.単体(状態異常スキル, "くものす", 80, 8, 属性.息, 80, "攻封"),
        new スキル("あやつりいと", 120, 7, (使用者, 対象者) => {
          new 通常攻撃(対象者);
        })
      ], new 転職条件(["遊び人", "魔物使い", "忍者"]));
    }
  }

  class 魔銃士 extends 転職可能な職業 {
    constructor() {
      super(3, 4, 5, 1, 4, [
        スキル.単体(状態異常スキル, "いかくしゃげき", 5, 4, 属性.攻, 80, "動封"),
        スキル.単体攻撃("そげき", 15, 7, 属性.攻, ステータス.攻撃力, 0.6, true),
        new スキル("たかのめ", 30, 0, (使用者) => {
          使用者.命中率を初期値に();
        }),
        new スキル("かんせつねらい", 60, 12, (使用者, 対象者) => {
          const 技 = new 単体ダメージ(使用者, 対象者, 属性.攻, 使用者.ステータス.攻撃力 * 0.5, true);
          if (!技.完了 || 技.対象者.は死んでいる()) {
            return;
          }
          new 状態異常スキル(使用者, 対象者, 属性.攻, 80, "動封");
        }),
        スキル.全体非依存攻撃("クレイモア", 90, 34, 属性.攻, 180),
        スキル.連続攻撃(3, 4, "みだれうち", 130, 44, 属性.攻, ステータス.攻撃力, 0.7, true)
      ], 転職条件.アイテム("魔銃"));
    }
  }

  class 妖精 extends 転職可能な職業 {
    constructor() {
      super(3, 5, 2, 3, 5, [
        new スキル("めかくし", 5, 0, (使用者) => {
          const 対象者 = 使用者.ランダムなメンバーを取得();
          対象者.命中率 = Math.trunc(対象.命中率 * 0.5);
          使用者.チャット書き込み予約(`${使用者.名前}は${対象者.名前}に目隠しをし`);
          使用者.チャット書き込み予約(クラス付きテキスト("st_down", `${対象者.名前}の命中率がさがった！`));
        }),
        new スキル("ようせいのや", 10),
        スキル.いたずら("くちをふさぐ", 20, "魔封"), // TODO
        new スキル("ちょうはつ", 35),
        new スキル("でたらめや", 50),
        new スキル("からかう", 65),
        スキル.ゆびをふる("ゆびをふる", 80)
      ], 転職条件.アイテム("妖精の笛"));
    }
  }

  class ﾐﾆﾃﾞｰﾓﾝ extends 転職可能な職業 {
    constructor() {
      super(3, 5, 2, 4, 4, [
        スキル.全体非依存攻撃("イオ", 6, 5, 属性.魔, 25),
        new スキル("マホキテ", 16),
        new スキル("イオラ", 36),
        new スキル("パルプンテ", 46, 10, (使用者) => {
          if (確率(1 / 2)) {
            const 一時的状態名 = ランダムな1要素(["２倍", "攻反撃", "魔反撃", "受流し"]);
            for (const メンバー of 使用者.メンバー全員(undefined, false)) {
              メンバー.一時的状態にする(一時的状態名);
            }
            使用者.チャット書き込み予約(`なんと、${クラス付きテキスト("tmp", `全員の状態が ${一時的状態名} になりました！`)}`);
          }
          else if (確率(1 / 2)) {
            const 状態異常名 = ランダムな1要素(["混乱", "眠り", "麻痺", "猛毒"]);
            for (const メンバー of 使用者.メンバー全員(undefined, false)) {
              メンバー.状態異常にする(状態異常名, true, false);
            }
            使用者.チャット書き込み予約(`なんと、${クラス付きテキスト("state", `全員が ${状態異常名} 状態になりました！`)}`);
          }
          else if (確率(1 / 2)) {
            for (const メンバー of 使用者.メンバー全員()) {
              if (メンバー.ステータス.ＨＰ.基礎値 > 999) {
                continue;
              }
              if (メンバー.は死んでいる()) {
                使用者.チャット書き込み予約(クラス付きテキスト("revive", `${メンバー.名前}が生き返った`));
              }
              メンバー.ステータス.ＨＰ.基礎値へ();
            }
            使用者.チャット書き込み予約(クラス付きテキスト("heal", "全員のＨＰが回復した！"));
          }
          else if (確率(1 / 3)) {
            for (const メンバー of 使用者.メンバー全員()) {
              メンバー.ステータス.素早さ = 0;
            }
            使用者.チャット書き込み予約(`なんと、${クラス付きテキスト("st_down", "全員の体がなまりのように重くなった！")}`);
          }
          else if (確率(1 / 2)) {
            for (const メンバー of 使用者.メンバー全員(undefined, false)) {
              if (!メンバー.は即死耐性を持っている(false)) {
                メンバー.ステータス.ＨＰ.現在値 = 1;
              }
            }
            使用者.チャット書き込み予約(`なんと、空から流星が降りそそいだ！全員の${クラス付きテキスト("damage", "ＨＰが 1 ")}になった！`);
          }
          else {
            使用者.チャット書き込み予約("………。しかし、何も起こらなかった…");
          }
        }),
        new スキル("イオナズン", 66),
        スキル.ゆびをふる("デビルテイル", 96)
      ], 転職条件.アイテム("悪魔のしっぽ"));
    }
  }

  class ｴﾙﾌ extends 転職可能な職業 {
    constructor() {
      super(4, 4, 3, 4, 4, [
        new スキル("ホイミ", 10),
        new スキル("フラッシュアロー", 20),
        new スキル("ベホイミ", 40),
        new スキル("ラリホーアロー", 60),
        new スキル("ザオラル", 80),
        new スキル("ようせいのや", 100),
        スキル.全体(バフスキル, "バイシオン", 120, 33, 属性.魔, ステータス.攻撃力, 0.7)
      ], 転職条件.アイテム("ｴﾙﾌの飲み薬"));
    }
  }

  class ﾀﾞｰｸｴﾙﾌ extends 転職可能な職業 {
    constructor() {
      super(3, 6, 3, 2, 4, [
        new スキル("ライフシェーバー", 20, 26, (使用者, 対象者) => {
          if (!対象者.回避(1 / 5)) {
            new デバフスキル(使用者, 対象者, 属性.魔, ステータス.ＨＰ, 0.7)
          }
        }),
        new スキル("トランス", 50, 9, (使用者) => {
          使用者.状態異常を解除(undefined, null);
          new バフスキル(使用者, 使用者, 属性.攻, ステータス.攻撃力, 1);
          new バフスキル(使用者, 使用者, 属性.攻, ステータス.素早さ, 1);
          使用者.一時的状態にする("魔吸収", null);
          使用者.状態異常にする("混乱", (戦闘メンバー) => `${戦闘メンバー.名前}はトランス状態になった！`);
        }),
        スキル.全体ランダム状態異常("のろい", 80, 16, 属性.魔, 70, ["魔封", "攻封", "動封"]),
        スキル.単体(デバフスキル, 属性.魔, ステータス.ＭＰ, 0.4),
        new スキル("かくせい", 140, 33, (使用者) => {
          使用者.一時的状態にする("２倍");
          使用者.テンションを上げる();
          使用者.テンションを上げる();
        }),
        new スキル("ハレーション", 160, 66, (使用者) => {
          for (const 敵 of 使用者.メンバー全員(true)) {
            if (!敵.回避(1 / 3)) {
              new デバフスキル(使用者, 敵, 属性.魔, ステータス.ＨＰ, 0.75);
            }
          }
        })
      ], 転職条件.アイテム("禁じられた果実"));
    }
  }

  class 連携系職業 extends 転職可能な職業 {
    constructor(
      ＨＰ成長率, ＭＰ成長率, 攻撃力成長率, 守備力成長率, 素早さ成長率,
      呼び出す名前, 呼び出す味方リスト, 呼び出すはレベル依存かまたはランダムか, 連携できる職業名, 連携技, 転職条件
    ) {
      super(ＨＰ成長率, ＭＰ成長率, 攻撃力成長率, 守備力成長率, 素早さ成長率, [], 転職条件);
      this.スキルリスト = [
        new スキル("よびだす", 10, 30, this.#よびだす.bind(this), false),
        new スキル("にげろ", 11, 0, this.#にげろ.bind(this), false),
        new スキル("こうげきめいれい", 12, 0, this.#こうげきめいれい.bind(this), false),
        new スキル("ひっさつめいれい", 30, 30, this._ひっさつめいれい.bind(this), false),
        new スキル("ぼうぎょめいれい", 100, 10, this.#ぼうぎょめいれい.bind(this), false),
        連携技 ?? this.#がったい.bind(this)
      ];
      this.#呼び出す名前 = `@${呼び出す名前}@`;
      this.#呼び出す味方リスト = 呼び出す味方リスト;
      this.#よびだすがレベル依存かランダムか = false;
      this.#連携できる職業名 = 連携できる職業名;
    }

    #よびだす(使用者) {
      this.使用者.#呼び出す名前;
      if (使用者.現在地.名前から(this.#呼び出す名前)) {
        使用者.チャット書き込み予約(`${this.#呼び出す名前}を呼び出すのに失敗した…`);
        return;
      }
      使用者.チャット書き込み予約(`${this.#呼び出す名前}が戦闘に参加した！`);
      const 添え字 = !呼び出すはレベル依存かまたはランダムか ? (
        確率(1 / 3) ? 0
          : 確率(1 / 3) ? 1
            : 2
      ) : 使用者.レベル < 40 ? 0
        : 使用者.レベル < 70 ? 1
          : 2;
      使用者.現在地.メンバー追加(this.#呼び出す味方リスト[添え字].戦闘メンバーとして取得(this.#呼び出す名前, 使用者, !呼び出すはレベル依存かまたはランダムか));
    }

    #にげろ(使用者) {
      const パートナー = 使用者.現在地.名前から(this.#呼び出す名前);
      if (パートナー === undefined || パートナー.は死んでいる()) {
        return;
      }
      パートナー.色 = NPC色;
      パートナー.死亡();
      使用者.チャット書き込み予約(`${this.#呼び出す名前}が戦闘から逃げ出した！`);
    }

    #こうげきめいれい(使用者, 対象者) {
      const パートナー = this.#連携できるメンバーを探す(使用者);
      使用者.チャット書き込み予約(`${パートナー.名前}： ＠こうげき `);
      new こうげき(パートナー, 対象者); // TODO
    }

    #ぼうぎょめいれい(使用者) {
      const パートナー = this.#連携できるメンバーを探す(使用者);
      使用者.チャット書き込み予約(`${パートナー.名前}： ＠ぼうぎょ `);
      パートナー.一時的状態にする("防御", "は身を固めた！");
    }

    #ひっさつめいれい(使用者, 対象者) {
      const パートナー = this.#連携できるメンバーを探す(使用者);
      使用者.チャット書き込み予約(`${パートナー.名前}： `);
      this._ひっさつめいれい(使用者, 対象者, パートナー);
    }

    #連携技(使用者) {
      const パートナー = this.#連携できるメンバーを探す(使用者);
      this._連携技中身?.() ?? this.#がったい(使用者, パートナー);
    }

    #連携できる職業の味方を探す(使用者) {
      // 合体済みを除くためアイコンで判定
      const
        職業 = 職業.一覧(this.#連携できる職業名),
        男アイコン = 職業.アイコン名を取得("男"),
        女アイコン = 職業.アイコン名を取得("女");

      for (const 味方 of 使用者.メンバー全員(false, undefined, true)) {
        if (味方.アイコン === 男アイコン || 味方.アイコン === 女アイコン) {
          if (味方.は死んでいる())
            throw "連携する味方が死んでいる";
          return 味方;
        }
      }
    }

    #連携できるメンバーを探す(使用者) {
      const パートナー = 使用者.現在地.名前から(this.#呼び出す名前) ?? this.#連携できる職業の味方を探す(使用者);
      if (パートナー === undefined)
        throw "連携できる味方がいなかった";
      return パートナー;
    }

    #がったい(使用者, パートナー) {
      // TODO
      使用者.ステータス.増減(パートナー.ステータス);
      パートナー.ステータス = 使用者.ステータス;
      クラス付きテキスト("tmp", `${使用者.名前}と${パートナー.名前}は合体した！`);
      使用者.アイコン = this.アイコン名を取得(使用者.性別, true);
      if (パートナー.はNPC()) {
        パートナー.色 = NPC色;
        パートナー.ステータス.ＨＰ.現在値 = 0;
      }
      else {
        パートナー.アイコン = "job/0.gif";
      }
    }

    #連携できる職業名;
    #呼び出す名前;
    #呼び出す味方リスト;
    #よびだすがレベル依存かランダムか;
  }

  class ｽﾗｲﾑﾗｲﾀﾞｰ extends 連携系職業 {
    constructor() {
      super(4, 3, 2, 1, 4, "ｽﾗｲﾑ", [
        new NPCの味方("mon/001.gif", 70, 120, 50, 30, 120),
        new NPCの味方("mon/006.gif", 180, 80, 80, 50, 200),
        new NPCの味方("mon/004.gif", 5, 10, 10, 950, 950)
      ], true, "ｽﾗｲﾑ", undefined, 転職条件.アイテム("ｽﾗｲﾑﾋﾟｱｽ"));
    }

    _ひっさつめいれい(使用者, 対象者, パートナー) {
      if (確率(1 / 2)) {
        $com = '＠スラアタック ';
        new 単体ダメージ(使用者, 対象者, 属性.攻, パートナー.ステータス.攻撃力.現在値 * 1.5, '攻');
      }
      else if (確率(1 / 2)) {
        $com = '＠スラストライク ';
        new 単体ダメージ(使用者, 対象者, 属性.攻, パートナー.ステータス.攻撃力.現在値 * 1.2, true);
      }
      else {
        $com = '＠しゃくねつ ';
        全体技.ダメージ(220, '息', 1);
      };
    }
  }

  class ﾄﾞﾗｺﾞﾝﾗｲﾀﾞｰ extends 連携系職業 {
    constructor() {
      super(5, 2, 4, 4, 2, "ﾄﾞﾗｺﾞﾝ", [
        new NPCの味方("083.gif", 160, 70, 180, 100, 70),
        new NPCの味方("mon/084.gif", 250, 50, 300, 200, 100),
        new NPCの味方("mon/224.gif", 400, 30, 400, 300, 100)
      ], true, "ﾄﾞﾗｺﾞﾝ", undefined, 転職条件.アイテム("飛竜のﾋｹﾞ"));
    }

    _ひっさつめいれい(使用者, 対象者, パートナー) {
      if (確率(1 / 2)) {
        $com = '＠きりさく ';
        new 単体ダメージ(使用者, 対象者, 属性.攻, パートナー.ステータス.攻撃力.現在値 * 1.7);
      }
      else if (確率(1 / 2)) {
        $com = '＠たたきつぶす ';
        new 単体ダメージ(使用者, 対象者, 属性.攻, パートナー.ステータス.攻撃力.現在値 * 1.5, true);
      }
      else {
        $com = '＠かがやくいき ';
        全体技.ダメージ(使用者, 属性.息, 230);
      }
    }
  }

  class ﾈｸﾛﾏﾝｻｰ extends 連携系職業 {
    constructor() {
      super(3, 5, 2, 1, 4, "ｿﾞﾝﾋﾞ", [
        new NPCの味方("mon/040.gif", 120, 120, 120, 60, 120),
        new NPCの味方("mon/041.gif", 300, 200, 280, 90, 240),
        new NPCの味方("mon/064.gif", 444, 444, 666, 222, 444)
      ], true, "ﾈｸﾛﾏﾝｻｰ", true, 転職条件.アイテム("禁断の書"));
    }

    _ひっさつめいれい(使用者) {
      if (確率(1 / 2)) {
        $com = '＠ザラキ ';
        new 全体技(使用者, 即死スキル, 1, 属性.魔, 22);
      }
      else if (確率(1 / 2)) {
        $com = '＠バイオガ ';
        全体技.ダメージ(使用者, 属性.魔, 120);
        new 全体技(使用者, 状態異常スキル, 1, 属性.魔, 40, "猛毒");
      } else {
        $com = '＠もうどくのきり ';
        new 全体技(使用者, 状態異常スキル, 1, 属性.息, 70, "猛毒");
      }
    }
  }

  class ﾊﾞｯﾄﾏｽﾀｰ extends 連携系職業 {
    constructor() {
      super(4, 4, 3, 1, 5, "ﾊﾞｯﾄ", [
        new NPCの味方("mon/025.gif", 90, 80, 120, 10, 180),
        new NPCの味方("mon/026.gif", 210, 270, 170, 30, 400),
        new NPCの味方("mon/027.gif", 410, 350, 400, 50, 600)
      ], true, "ﾐﾆﾃﾞｰﾓﾝ", true, 転職条件.アイテム("ｺｳﾓﾘの羽"));
    }

    _ひっさつめいれい(使用者, 対象者) {
      if (確率(1 / 2)) {
        $com = '＠きゅうけつ ';
        new 連続技(使用者, 対象者,
          [単体ダメージ, 属性.魔, 100, true],
          [回復スキル, 属性.魔]
        );
      }
      else if (確率(1 / 2)) {
        $com = '＠アスピル ';
        new 連続技(使用者, 対象者,
          [デバフスキル, 属性.魔, 0.3, ステータス.ＭＰ],
          [ＭＰ回復スキル, 属性.魔]
        );
      }
      else {
        $com = '＠ちょうおんぱ ';
        new 全体技(状態異常スキル, 使用者, 属性.歌, 70, "混乱");
      }
    }
  }

  class ｷﾉｺﾏｽﾀｰ extends 連携系職業 {
    constructor() {
      super(4, 3, 3, 3, 3, "ｷﾉｺ", [
        new NPCの味方("mon/030.gif", 100, 100, 80, 50, 80),
        new NPCの味方("mon/031.gif", 300, 80, 150, 100, 100),
        new NPCの味方("mon/032.gif", 400, 600, 200, 100, 100)
      ], true, "ｷﾉｺﾏｽﾀｰ", undefined, 転職条件.アイテム("ﾏｼﾞｯｸﾏｯｼｭﾙｰﾑ"));
    }

    _ひっさつめいれい(使用者) {
      if (確率(1 / 2)) {
        $com = '＠どくのこな ';
        new 全体技(使用者, 状態異常スキル, 1, 属性.息, 90, "猛毒");
      }
      else if (確率(1 / 2)) {
        $com = '＠しびれごな ';
        new 全体技(使用者, 状態異常スキル, 1, 属性.息, 50, "麻痺");
      } else {
        $com = '＠ねむりごな ';
        new 全体技(使用者, 状態異常スキル, 1, 属性.息, 50, "眠り");
      };
    }
  }

  class ｵﾊﾞｹﾏｽﾀｰ extends 連携系職業 {
    constructor() {
      super(3, 4, 2, 3, 5, "ｺﾞｰｽﾄ", [
        new NPCの味方("mon/035.gif", 100, 100, 50, 100, 100),
        new NPCの味方("mon/036.gif", 200, 80, 100, 150, 150),
        new NPCの味方("mon/070.gif", 300, 60, 150, 200, 200)
      ], true, "ｵﾊﾞｹﾏｽﾀｰ", undefined, 転職条件.アイテム("透明ﾏﾝﾄ"));
    }

    _ひっさつめいれい(使用者, 対象者) {
      if (確率(1 / 2)) {
        $com = '＠ひょうい ';
        // TODO
        // my($y) = & _check_enemy(shift, '操り', '息'); return if !$y;
        // $com= "$n： ＠こうげき ";
        // $buf_m = $m;
        // $m = $y;
        // & kougeki();
        // $m = $buf_m;
      }
      else if (確率(1 / 2)) {
        $com = '＠じゅばく ';
        new 状態異常スキル(使用者, 対象者, 属性.無, 80, "攻封");
      }
      else {
        $com = '＠おどろかす';
        new 全体技(使用者, 状態異常スキル, 1, 属性.攻, 60, "動封");
      }
    }
  }

  class ｹﾓﾉﾏｽﾀｰ extends 連携系職業 {
    constructor() {
      super(5, 2, 4, 3, 4, "ｹﾓﾉ", [
        new NPCの味方("mon/200.gif", 100, 60, 100, 60, 180),
        new NPCの味方("mon/206.gif", 210, 90, 300, 80, 280),
        new NPCの味方("mon/203.gif", 400, 230, 500, 160, 400)
      ], true, "ﾓｰｸﾞﾘ", true, 転職条件.アイテム("獣の血"));
    }

    _ひっさつめいれい(使用者, 対象者, パートナー) {
      if (確率(1 / 2)) {
        $com = '＠ひっかく ';
        new 単体ダメージ(使用者, 対象者, 属性.攻, パートナー.ステータス.攻撃力.現在値 * 1.5);
      }
      else if (確率(1 / 2)) {
        $com = '＠かみつく ';
        new 単体ダメージ(使用者, 対象者, 属性.攻, パートナー.ステータス.攻撃力.現在値 * 1.2, true);
      }
      else {
        $com = '＠とつげき ';
        new 単体ダメージ(使用者, 対象者, 属性.攻, パートナー.ステータス.攻撃力.現在値 * 2.0);
      }
    }
  }

  class ﾄﾞｸﾛﾏｽﾀｰ extends 連携系職業 {
    constructor() {
      super(4, 3, 3, 4, 3, "ｶﾞｲｺﾂ", [
        new NPCの味方("mon/043.gif", 120, 110, 160, 90, 150),
        new NPCの味方("mon/044.gif", 240, 210, 240, 120, 180),
        new NPCの味方("mon/056.gif", 450, 280, 400, 240, 300)
      ], true, "ﾄﾞｸﾛﾏｽﾀｰ", true, 転職条件.アイテム("死者の骨"));
    }

    _ひっさつめいれい(使用者, 対象者) {
      if (確率(1 / 2)) {
        $com = '＠しのおどり ';
        new 全体技(使用者, 即死スキル, 1, 属性.踊, 20);
      }
      else if (確率(1 / 2)) {
        $com = '＠デス ';
        new 即死スキル(使用者, 対象者, 属性.攻, 40);
      }
      else {
        $com = '＠のろい ';
        const 状態異常候補 = ["攻封", "動封"];
        for (const 敵 of 使用者.メンバー全員(true)) {
          new 状態異常スキル(使用者, 敵, 属性.魔, 75, ランダムな1要素(状態異常候補));
        }
      }
    }
  }

  class ﾊﾞﾌﾞﾙﾏｽﾀｰ extends 連携系職業 {
    constructor() {
      super(4, 4, 2, 2, 3, "ﾊﾞﾌﾞﾙ", [
        new NPCの味方("mon/020.gif", 90, 120, 90, 50, 90),
        new NPCの味方("mon/021.gif", 180, 280, 160, 120, 180),
        new NPCの味方("mon/022.gif", 8, 500, 80, 950, 950)
      ], true, "ﾊｸﾞﾚﾒﾀﾙ", true, 転職条件.アイテム("謎の液体"));
    }

    _ひっさつめいれい(使用者, 対象者, パートナー) {
      if (パートナー.アイコン名.includes("020")) {
        $com = '＠ドクドク ';
        new 全体技(使用者, 状態異常スキル, 属性.息, 80, "猛毒");
      }
      else if (パートナー.アイコン名.includes("021")) {
        $com = '＠マグマ ';
        全体技.ダメージ(使用者, 属性.息, 220);
      }
      else {
        $com = '＠ジゴスパーク ';
        全体技.ダメージ(使用者, 属性.魔, 150);
        new 全体技(使用者, 状態異常スキル, 属性.魔, 20, "麻痺");
      }
    }
  }

  class ｺﾛﾋｰﾛｰ extends 連携系職業 {
    constructor() {
      super(5, 2, 4, 3, 3, "ｺﾛ", [
        new NPCの味方("mon,101.gif", 0.8, 0.2, 3.0, 2.0, 1.0),
        new NPCの味方("mon/102.gif", 0.6, 1.0, 1.0, 1.0, 2.0),
        new NPCの味方("mon/103.gif", 0.7, 1.0, 1.5, 1.5, 1.5)
      ], false, "ｺﾛﾋｰﾛｰ", true, 転職条件.アイテム("ﾋｰﾛｰｿｰﾄﾞ"));
    }

    _ひっさつめいれい(使用者, 対象者, パートナー) {
      if (パートナー.アイコン名.includes("101")) {
        $com = '＠まじんぎり ';
        new 単体ダメージ(使用者, 対象者, 属性.攻, 確率(1 / 2) ? 20 : 使用者.ステータス.攻撃力.現在値 * 3);
      }
      else if (パートナー.アイコン名.includes("102")) {
        $com = '＠メラゾーマ ';
        new 単体ダメージ(使用者, 対象者, 属性.魔, 220, true);
      }
      else {
        $com = '＠ベホマ ';
        new 回復スキル(使用者, 対象者, 属性.魔, 999);
      }
    }
  }

  class ﾌﾟﾁﾋｰﾛｰ extends 連携系職業 {
    constructor() {
      super(5, 2, 4, 3, 3, "ﾌﾟﾁ", [
        new NPCの味方("mon/106.gif", 0.8, 0.2, 3.0, 2.0, 1.0),
        new NPCの味方("mon/107.gif", 0.6, 1.0, 1.0, 1.0, 2.0),
        new NPCの味方("mon/108.gif", 0.7, 1.0, 1.5, 1.5, 1.5)
      ], false, "ﾌﾟﾁﾋｰﾛｰ", new スキル("ミナデイン", 180, 30, (使用者, 対象者) => {
        new ミナデイン(使用者, 対象者, 属性.魔, 100, 15, 85);
      }), 転職条件.アイテム("ﾋｰﾛｰｿｰﾄﾞ2"));
    }

    _ひっさつめいれい(使用者, 対象者, パートナー) {
      if (パートナー.アイコン名.includes("106")) {
        $com = '＠まじんぎり ';
        new 単体ダメージ(使用者, 対象者, 属性.攻, 確率(1 / 2) ? 20 : 使用者.ステータス.攻撃力.現在値 * 3);
      }
      else if (パートナー.アイコン名.includes("107")) {
        $com = '＠メラゾーマ ';
        new 単体ダメージ(使用者, 対象者, 属性.魔, 220, true);
      }
      else {
        $com = '＠ベホマ ';
        new 回復スキル(使用者, 対象者, 属性.魔, 999);
      }
    }
  }

  class 天竜人 extends 転職可能な職業 {
    constructor() {
      super(4, 5, 3, 2, 3, [
        new スキル("めいそう", 50),
        new スキル("ドラゴンパワー", 100),
        new スキル("ギガデイン", 150),
        new スキル("てんしのうたごえ", 200)
      ], new 転職条件(空配列));
    }
  }

  class ﾁｮｺﾎﾞﾗｲﾀﾞｰ extends 連携系職業 {
    constructor() {
      super(5, 3, 2, 3, 2, "ﾁｮｺﾎﾞ", [
        new NPCの味方("job/44_m.gif", 150, 70, 100, 50, 180),
        new NPCの味方("chr/032.gif", 270, 50, 270, 70, 270),
        new NPCの味方("chr/033.gif", 500, 30, 300, 300, 10)
      ], false, "ﾁｮｺﾎﾞ", undefined, 転職条件.アイテム("ﾁｮｺﾎﾞの羽"));
    }

    _ひっさつめいれい(使用者, 対象者, パートナー) {
      if (確率(1 / 3)) {
        $com = "＠チョコボキック ";
        new 単体ダメージ(使用者, 対象者, 属性.攻, パートナー.ステータス.攻撃力.現在値 * 1.4);
      }
      else if (確率(1 / 2)) {
        $com = '＠チョコケアル ';
        new 回復スキル(使用者, 対象者, 属性.魔, 150);
      }
      else {
        $com = '＠チョコダンス ';
        new 全体技(使用者, 状態異常スキル, 1, 属性.踊, 80, "動封");
      }
    }
  }

  class 算術士 extends 転職可能な職業 {
    constructor() {
      super(3, 6, 1, 3, 3, [
        // TODO
      ], 転職条件.アイテム("ｲﾝﾃﾘﾒｶﾞﾈ"));
    }
  }

  class すっぴん extends 転職可能な職業 {
    constructor() {
      super(5, 5, 4, 4, 4, [
        // TODO
      ], 転職条件.実績("ジョブマスター", 1))
    }
  }

  class 無職 extends 職業 {
    constructor() {
      super([
        new スキル("こうげき", 8, 0, (使用者, 対象者) => { new 通常攻撃(使用者, 対象者); }),
        new スキル("こうげき", 9),
        new スキル("こうげき", 10),
        new スキル("てんしょん", 20, (使用者) => { 使用者.テンションを上げる(); }),
        new スキル("ぼうぎょ", 30, 0, (使用者) => { 使用者.一時的状態にする("防御") })
      ]);
    }
  }

  class 猛毒系 extends 職業 {
    constructor() {
      super([
        new スキル("どくこうげき", 10),
        new スキル("ポイズン", 20),
        new スキル("もうどくのきり", 30)
      ]);
    }
  }

  class 麻痺系 extends 職業 {
    constructor() {
      super([
        new スキル("まひこうげき", 10),
        new スキル("しびれうち", 20),
        new スキル("やけつくいき", 30, 9)
      ]);
    }
  }

  class 眠り系 extends 職業 {
    constructor() {
      super([
        new スキル("ラリホー", 10),
        スキル.追加効果付き単体攻撃("ねむりこうげき", 20, 15, 属性.攻, ステータス.攻撃力, 0.8, 状態異常スキル, 属性.攻, 55, "眠り"),
        new スキル("あまいいき", 30)
      ])
    }
  }

  class 即死系 extends 職業 {
    constructor() {
      super([
        new スキル("ザキ", 10),
        new スキル("ザラキ", 20),
        new スキル("しのおどり", 30),
        new スキル("しのせんこく", 40)
      ]);
    }
  }

  class 自爆系 extends 職業 {
    constructor() {
      super([
        new スキル("メガンテ"), // TODO
        new スキル("ねる", 20)
      ]);
    }
  }

  class 召喚系 extends 職業 {
    constructor() {
      super([
        new スキル("しょうかん", 0, 50), // TODO
        new スキル("しょうかん", 0)
      ]);
    }
  }

  class ﾄﾞｰﾙﾏｽﾀｰ extends 職業 {
    constructor() {
      super([
        new スキル("あやつる", 0, 0), // TODO
        new スキル("クールジョーク", 0)
      ]);
    }
  }

  // TODO スキル効果埋め & スキル効果一致確認
  class 超攻撃系 extends 職業 {
    constructor() {
      super([
        new スキル("みだれうち", 0), // TODO 弓使いと同じ
        new スキル("ばくれつけん", 0), // TODO 威力違い
        new スキル("いてつくはどう", 0),
        new スキル("めいやく", 0),
        new スキル("だいぼうそう", 0), // TODO 威力違い
        new スキル("あんこくけん", 0, 40), // TODO 反動違い
        new スキル("きあいため", 0, 33), // TODO 消費ＭＰ違い
        スキル.全体非依存攻撃("しっこくのほのお", 0, 80, 属性.息, 400),
        new スキル("ジゴスパーク", 0), // TODO 威力違い
        new スキル("しのせんこく", 0), // TODO 確率違い
        new スキル("やみのてんし", 0) // TODO 威力違い
      ]);
    }
  }

  class 超魔法系 extends 職業 {
    constructor() {
      super([
        new スキル("こころないてんし", 0), // TODO 確率違い
        new スキル("こころないてんし", 0),
        new スキル("いてつくはどう", 0),
        new スキル("カーバンクル", 0),
        new スキル("マイティガード", 0), // TODO ＭＰ違い
        new スキル("かくせい", 0), // TODO ＭＰ違い
        new スキル("ブラッドレイン", 0, 40), // TODO いろいろ違い
        new スキル("バブルボム", 0, 40), // TODO 違い
        new スキル("しっこくのほのお", 0), // TODO 威力違い
        new スキル("ダークメテオ", 0, 99,), // TODO
        スキル.全体非依存攻撃("アルテマ", 0, 99, 属性.魔, 400)
      ]);
    }
  }

  class にげだす extends 職業 {
    constructor() {
      super([
        new スキル("にげだす", 0, 0, (使用者) => { 使用者.死亡(false); })
      ]);
    }
  }

  class ﾄﾝﾍﾞﾘ extends 職業 {
    constructor() {
      super([
        new スキル("みんなのうらみ", 0, 99, (使用者, 対象者) => {
          new 単体ダメージ(使用者, 対象者, 属性.攻, あなた.実績.モンスター討伐数 * 0.1, true);
        }), // TODO
        スキル.単体非依存攻撃("ほうちょう", 0, 666, 属性.攻, 666, true)
      ]);
    }
  }

  class 暗黒竜のﾀﾏｺﾞ extends 職業 {
    constructor() {
      super([
        new スキル("しょうかん", 0), // TODO 効果違い
        new スキル("しょうかん", 0)
      ]);
    }
  }