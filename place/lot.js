// @ts-check
"use strict";

import { 一般的な場所 } from "./General.js"
import { 場所 } from "./Place.js";

export class 福引所 extends 一般的な場所 {
  constructor() {
    super("lot.gif", 場所._訪問方法.いどう, new キャラクター("@ﾌｸｽｹ", "chr/006.gif"));
    this._こうどうリストリスト.unshift(new こうどうマネージャー(null,
      new こうどう("ふくびき", () => { this._ふくびき(); }),
      new こうどう("しょうひん", () => { this._しょうひん(); })
    ));
    this.#特別な福引 = new 福引(300, "ｵｰﾌﾞ", "ｶﾞﾗ", 100,
      () => {
        return アイテム.範囲("ｽﾗｲﾑﾋﾟｱｽ", "ﾋｰﾛｰｿｰﾄﾞ2").ランダム取得().名前;
      },
      true,
      new 福引の賞品(null, "ｺﾞｰﾙﾄﾞ", "gold", 福引の台詞.特別な特賞, 3),
      new オーブの賞品("ｼﾙﾊﾞｰ", "silver", 12),
      new オーブの賞品("ﾚｯﾄﾞ", "red", 15),
      new オーブの賞品("ﾌﾞﾙｰ", "blue", 10),
      new オーブの賞品("ｸﾞﾘｰﾝ", "green", 10),
      new オーブの賞品("ｲｴﾛｰ", "yellow", 10),
      new オーブの賞品("ﾊﾟｰﾌﾟﾙ", "purple", 10),
      new 福引の賞品(null, "ﾎﾜｲﾄ", "white", 福引の台詞.特別なハズレ)
    );
    this.#通常の福引 = new 福引(3, "ｽﾗｲﾑ", "ﾌﾟﾆｮ", 1000,
      () => {
        return 更新日時.曜日に対応する要素を返す("賢者の悟り", "ﾄﾞﾗｺﾞﾝの心", "闇のﾛｻﾞﾘｵ", "魔銃", "ｷﾞｻﾞｰﾙの野菜", "ｸﾎﾟの実", "ｷﾞｬﾝﾌﾞﾙﾊｰﾄ")
      },
      false,
      new 福引の賞品(null, "金", "#FC3", 福引の台詞.特賞, 1, "特賞"),
      new 福引の賞品("精霊の守り", "赤", "#F33", 福引の台詞.超激レア, 3, "１等"),
      new 福引の賞品("ｽﾗｲﾑの心", "紫", "#C6F", 福引の台詞.超激レア, 4, "２等"),
      new 福引の賞品("小さなﾒﾀﾞﾙ", "黄", "#FF0", 福引の台詞.激レア, 6, "３等"),
      new 四等の賞品("命の木の実", 6),
      new 四等の賞品("不思議な木の実", 5),
      new 四等の賞品("力の種", 5),
      new 四等の賞品("守りの種", 5),
      new 四等の賞品("素早さの種", 5),
      new 四等の賞品("ｽｷﾙの種", 5),
      new 福引の賞品("祈りの指輪", "青", "#66F", 福引の台詞.レア, 10, "５等"),
      new 福引の賞品("福袋", "緑", "#3F3", 福引の台詞.普通, 20, "６等"),
      new 福引の賞品(null, "白", "#FFF", 福引の台詞.ハズレ)
    );
  }

  ヘッダー出力() {
    const 断片 = document.createDocumentFragment();
    断片.append(
      this._ヘッダー用出力(),
      `福引券`,
      あなた.メンバー._福引券.ヘッダー用出力(),
      `枚`
    );
    if (あなた.メンバー._道具) {
      断片.appendChild(document.createTextNode(` E：${あなた.メンバー._道具}`));
    }
    return 断片;
  }

  _はなす() {
    super._はなす(
      `福引券${this.#通常の福引.必要枚数}枚で１回まわすことができるよ`,
      "福引の賞品は「＠しょうひん」で確認してね",
      "特賞は曜日によって変わるよ",
      "福引券はルイーダの酒場で食事するともらえるよ",
      `${this.#特別な福引.必要枚数}枚以上福引券を持っている人は、特別な福引ができるよ`
    );
  }

  _NPCをしらべる() {
    super._NPCをしらべる([
      `なんと、${あなた}は福引券を見つけた！`,
      `${this._NPC.名前}「ダメだよ！あげないよ！」`
    ]);
  }

  _ふくびき() {
    this.#特別な福引.回す()
      || this.#通常の福引.回す(true);
  }

  _しょうひん() {
    if (あなた.メンバー._福引券.所持 >= this.#特別な福引.必要枚数) {
      通知欄.追加("裏福引の賞品リスト");
      this.#特別な福引.陳列棚出力();
    }
    else {
      通知欄.追加("福引の賞品リスト");
      this.#通常の福引.陳列棚出力();
    }
  }

  #特別な福引;
  #通常の福引;
}

class 福引 {
  constructor(必要枚数, 玉の種類, 擬音, 確率の分母, 特賞取得関数, 特賞を隠す, ...賞品) {
    this.#必要枚数 = 必要枚数;
    this.#玉の種類 = 玉の種類;
    this.#擬音 = 擬音;
    this.#確率の分母 = 確率の分母;
    this.#特賞取得関数 = 特賞取得関数;
    this.#特賞を隠す = 特賞を隠す;
    this.#賞品リスト = 賞品;
  }

  陳列棚出力() {
    const table = document.createElement("table");
    let
      前の賞品の型,
      特賞 = true;
    for (const 賞品 of this.#賞品リスト) {
      if (賞品.ハズレ) {
        break;
      }
      if (特賞) {
        特賞 = false;
        if (!this.#特賞を隠す) {
          table.appendChild(賞品.陳列棚用出力(this.#特賞取得関数()));
        }
        continue;
      }
      const 賞品の型 = Object.getPrototypeOf(賞品);
      if (賞品の型 !== 福引の賞品.prototype && 賞品の型 === 前の賞品の型) {
        continue;
      }
      table.appendChild(賞品.陳列棚用出力());
      前の賞品の型 = 賞品の型;
    }
    table.classList.add("table1");
    通知欄.追加(table);
  }

  出力(福引の賞品, 福引の賞品の出力) {
    const
      色付き文字 = document.createElement("span"),
      全体 = document.createElement("span");
    色付き文字.style.color = 福引の賞品.玉の色コード;
    色付き文字.textContent = `● 【${福引の賞品.玉の色名}${this.#玉の種類}】`;
    全体.append(
      `${this.#擬音}${this.#擬音}${this.#擬音}……ｺﾛｺﾛｺﾛ…...,,,`,
      色付き文字,
      福引の賞品の出力
    );
    if (福引の賞品.ハズレ) {
      const 残り回数 = Math.trunc(あなた.メンバー._福引券.所持 / this.#必要枚数);
      通知欄.追加([
        全体,
        (残り回数 > 0) ? `あと${残り回数}回まわせるよ` : "また挑戦してね"
      ]);
    }
    else {
      あなた.現在地.NPCに話させる(全体.innerHTML);
    }
  }

  回す(警告する = false) {
    if (!あなた.メンバー._福引券.収支(-this.#必要枚数)) {
      if (警告する) {
        通知欄.追加(`福引券を ${this.#必要枚数} 枚以上、持っていないようですねぇ…`);
      }
      return false;
    }
    let 乱数 = Math.random() * this.#確率の分母;
    for (const 賞品 of this.#賞品リスト) {
      const { 次の乱数, 出力 } = 賞品.抽選(乱数, this.#特賞取得関数);
      if (出力 !== undefined) {
        this.出力(賞品, 出力);
        break;
      }
      乱数 = 次の乱数;
    }
    return true;
  }

  get 必要枚数() {
    return this.#必要枚数;
  }

  #必要枚数;
  #玉の種類;
  #擬音;
  #確率の分母;
  #特賞取得関数;
  #特賞を隠す;
  #賞品リスト;
}

class 福引の賞品 {
  constructor(名前, 玉の色名, 玉の色コード, 台詞出力関数, 確率の分子, 等級) {
    this.#名前 = 名前;
    this.#玉の色名 = 玉の色名;
    this.#玉の色コード = 玉の色コード;
    this.#台詞出力関数 = 台詞出力関数;
    this.#確率の分子 = 確率の分子;
    this.#等級 = 等級;
  }

  陳列棚用出力(種類名) {
    return 福引の賞品.陳列棚用出力(this.#等級, 種類名 ?? this.#名前, this.#玉の色名, this.#玉の色コード);
  }

  抽選(抽選番号, 特賞取得関数) {
    if (this.ハズレ) {
      return { 出力: this.#出力() };
    }
    // 非当選
    if (this.#確率の分子 < 抽選番号) {
      return { 次の乱数: 抽選番号 - this.#確率の分子 };
    }
    const アイテム名 = this.#名前 ?? 特賞取得関数();
    return {
      出力: this.#出力()
        + (あなた.メンバー.装備または倉庫に送る(アイテム名, false) ? "はい。どうぞ！" : `${アイテム名}は、${あなた}さんの預かり所に送っておきますね`)
    }
  }

  get 玉の色名() { return this.#玉の色名; }
  get 玉の色コード() { return this.#玉の色コード; }
  get ハズレ() { return this.#確率の分子 === undefined; }

  static 陳列棚用出力(_等級, _名前, _玉の色名, _玉の色コード) {
    const
      等級 = document.createElement("span"),
      玉の色 = document.createElement("span");
    等級.style.color = 玉の色.style.color = _玉の色コード;
    等級.textContent = _等級;
    玉の色.textContent = `●${_玉の色名}`;
    return テーブル行出力([等級, 玉の色, _名前]);
  }

  #出力() {
    return this.#台詞出力関数(this.#名前, this.#等級);
  }

  #等級;
  #名前;
  #玉の色名;
  #玉の色コード;
  #台詞出力関数;
  #確率の分子;
}

class オーブの賞品 extends 福引の賞品 {
  constructor(色の名前, 色コード, 確率の分子) {
    super(`${色の名前}ｵｰﾌﾞ`, 色の名前, 色コード, 福引の台詞.特別なアタリ, 確率の分子);
  }

  陳列棚用出力() {
    return 福引の賞品.陳列棚用出力("１等", "オーブ", 空文字列, "gold");
  }
}

class 四等の賞品 extends 福引の賞品 {
  constructor(名前, 確率の分子) {
    super(名前, "桃", "#F3F", 福引の台詞.レア, 確率の分子, "４等");
  }

  陳列棚用出力() {
    return super.陳列棚用出力("種系");
  }
}
