// @ts-check
"use strict";

import { 一般的な場所 } from "./Place.js"

export class 町 extends 一般的な場所 {
  constructor(名前, 背景画像, 最大建築数, 家のアイコンリスト, 家の値段, 家の所有日数) {
    super(背景画像, 場所._訪問方法.まち);
    this._名前 = 名前;
    this.#最大建築数 = 最大建築数;
    // .gif 抜き
    this.#家のアイコンリスト = 家のアイコンリスト;
    this.#家の値段 = 家の値段;
    this.#家の所有日数 = 家の所有日数;
    this._こうどうリストリスト.unshift(new こうどうマネージャー(null,
      new こうどう("たてる", this._たてる.bind(this), undefined, this._たてる家の候補を表示.bind(this)),
      new こうどう("ちぇっく", this._ちぇっく.bind(this), undefined, this._ちぇっく説明)
    ));
  }

  _たてる(家のアイコン) {
    if (!this.#家のアイコンリスト.has(家のアイコン)) {
      this._たてる家の候補を表示();
      return;
    }
    if (this.#建設チェック()) {
      return;
    }
    const 期限 = 更新日時.取得() + this.#家の所有日数 * 24 * 60 * 60;
    this.NPCに話させる(`${あなた} の家を建てました！家の所有期間は ${更新日時.月日時タイムスタンプ文字列(期限)} までです`);
    あなた.メンバー.所持金.収支(-this.#家の値段);
    あなた.メンバー._ギルド?.ポイント獲得(this.#家の所有日数);
    データベース操作.場所別キャラクターの登録または更新(
      this.名前, new キャラクター(this.#家の名前(あなた), this.#家のアイコン(家のアイコン), undefined, 期限)
    );
  }

  _たてる家の候補を表示() {
    通知欄.追加([
      `${this._ヘッダー用出力()}家の値段 ${this.#家の値段} G / 最大建設数 ${this.#最大建築数} 軒 / 所有日数 ${this.#家の所有日数} 日`,
      "どの家を建てますか？",
      空文字列
    ]);
    for (const 家のアイコン名 of this.#家のアイコンリスト) {
      const img = document.createElement("img");
      img.src = `resource/icon/${this.#家のアイコン(家のアイコン名)}`;
      通知欄.追加(img, `＠たてる>${家のアイコン名} `);
    }
  }

  _ちぇっく(対象) {
    対象 += " の家";
    const 対象のキャラクター = this._名前からキャラクター取得(対象);
    if (!対象のキャラクター) {
      this._ちぇっく説明();
      return;
    }
    this.NPCに話させる(`<b>${対象}</b>の所有期間は ${更新日時.月日時タイムスタンプ文字列(対象のキャラクター.最終更新日時)} までです`);
  }

  _ちぇっく説明() {
    通知欄.追加(`＠ちぇっく>○○○ の家で、その家の所有期間を調べることができます`, "＠ちぇっく");
  }

  #建設チェック() {
    try {
      if (あなた.メンバー.所持金.所持 < this.#家の値段)
        throw "家を建てるお金が足りません";
      let 建設数 = 0;
      for (const キャラクター of this._キャラクターリスト) {
        // デフォルトに忠実
        if (キャラクター.はNPC色() && ++建設数 >= this.#最大建築数)
          throw [
            `${this.名前} には 最大 ${this.#最大建築数} 軒までしか建てることができません`,
            "家がなくなるまでしばらくお待ちください"
          ];
      }
      // TODO デフォルトだとほかの町もチェックしている(理想の実装的にはユーザーデータ側に家の期限を持つべきだと思われる)
      if (this._名前からキャラクター取得(this.#家の名前(あなた)) !== undefined)
        throw `${あなた} はすでに家を持っています`;
    }
    catch (エラー) {
      通知欄.追加(エラー);
      return true;
    }
    return false;
  }

  #家の名前(メンバー名) {
    return `${メンバー名} の家`;
  }

  #家のアイコン(家のアイコン名) {
    return `house/${家のアイコン名}.gif`;
  }

  #最大建築数;
  #家のアイコンリスト;
  #家の値段;
  #家の所有日数;
}